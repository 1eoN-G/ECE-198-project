
CommunicationSlave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004100  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080042a0  080042a0  000052a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004308  08004308  0000605c  2**0
                  CONTENTS
  4 .ARM          00000008  08004308  08004308  00005308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004310  08004310  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004310  08004310  00005310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004314  08004314  00005314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08004318  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  2000005c  08004374  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  08004374  000062b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a111  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001890  00000000  00000000  0001019d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000930  00000000  00000000  00011a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000712  00000000  00000000  00012360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cc3  00000000  00000000  00012a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bd4c  00000000  00000000  00029735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009275d  00000000  00000000  00035481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c7bde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bd0  00000000  00000000  000c7c24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000054  00000000  00000000  000ca7f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004288 	.word	0x08004288

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004288 	.word	0x08004288

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2f>:
 8000a2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a34:	bf24      	itt	cs
 8000a36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a3e:	d90d      	bls.n	8000a5c <__aeabi_d2f+0x30>
 8000a40:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a4c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a54:	bf08      	it	eq
 8000a56:	f020 0001 	biceq.w	r0, r0, #1
 8000a5a:	4770      	bx	lr
 8000a5c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a60:	d121      	bne.n	8000aa6 <__aeabi_d2f+0x7a>
 8000a62:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a66:	bfbc      	itt	lt
 8000a68:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a6c:	4770      	bxlt	lr
 8000a6e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a76:	f1c2 0218 	rsb	r2, r2, #24
 8000a7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a82:	fa20 f002 	lsr.w	r0, r0, r2
 8000a86:	bf18      	it	ne
 8000a88:	f040 0001 	orrne.w	r0, r0, #1
 8000a8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a98:	ea40 000c 	orr.w	r0, r0, ip
 8000a9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000aa0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa4:	e7cc      	b.n	8000a40 <__aeabi_d2f+0x14>
 8000aa6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aaa:	d107      	bne.n	8000abc <__aeabi_d2f+0x90>
 8000aac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ab0:	bf1e      	ittt	ne
 8000ab2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ab6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aba:	4770      	bxne	lr
 8000abc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ac0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ac4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_uldivmod>:
 8000acc:	b953      	cbnz	r3, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ace:	b94a      	cbnz	r2, 8000ae4 <__aeabi_uldivmod+0x18>
 8000ad0:	2900      	cmp	r1, #0
 8000ad2:	bf08      	it	eq
 8000ad4:	2800      	cmpeq	r0, #0
 8000ad6:	bf1c      	itt	ne
 8000ad8:	f04f 31ff 	movne.w	r1, #4294967295
 8000adc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ae0:	f000 b96a 	b.w	8000db8 <__aeabi_idiv0>
 8000ae4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ae8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000aec:	f000 f806 	bl	8000afc <__udivmoddi4>
 8000af0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000af4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000af8:	b004      	add	sp, #16
 8000afa:	4770      	bx	lr

08000afc <__udivmoddi4>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	9d08      	ldr	r5, [sp, #32]
 8000b02:	460c      	mov	r4, r1
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d14e      	bne.n	8000ba6 <__udivmoddi4+0xaa>
 8000b08:	4694      	mov	ip, r2
 8000b0a:	458c      	cmp	ip, r1
 8000b0c:	4686      	mov	lr, r0
 8000b0e:	fab2 f282 	clz	r2, r2
 8000b12:	d962      	bls.n	8000bda <__udivmoddi4+0xde>
 8000b14:	b14a      	cbz	r2, 8000b2a <__udivmoddi4+0x2e>
 8000b16:	f1c2 0320 	rsb	r3, r2, #32
 8000b1a:	4091      	lsls	r1, r2
 8000b1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b20:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b24:	4319      	orrs	r1, r3
 8000b26:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b2a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b2e:	fa1f f68c 	uxth.w	r6, ip
 8000b32:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b36:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b3a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b42:	fb04 f106 	mul.w	r1, r4, r6
 8000b46:	4299      	cmp	r1, r3
 8000b48:	d90a      	bls.n	8000b60 <__udivmoddi4+0x64>
 8000b4a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b4e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b52:	f080 8112 	bcs.w	8000d7a <__udivmoddi4+0x27e>
 8000b56:	4299      	cmp	r1, r3
 8000b58:	f240 810f 	bls.w	8000d7a <__udivmoddi4+0x27e>
 8000b5c:	3c02      	subs	r4, #2
 8000b5e:	4463      	add	r3, ip
 8000b60:	1a59      	subs	r1, r3, r1
 8000b62:	fa1f f38e 	uxth.w	r3, lr
 8000b66:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b6a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b72:	fb00 f606 	mul.w	r6, r0, r6
 8000b76:	429e      	cmp	r6, r3
 8000b78:	d90a      	bls.n	8000b90 <__udivmoddi4+0x94>
 8000b7a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b7e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b82:	f080 80fc 	bcs.w	8000d7e <__udivmoddi4+0x282>
 8000b86:	429e      	cmp	r6, r3
 8000b88:	f240 80f9 	bls.w	8000d7e <__udivmoddi4+0x282>
 8000b8c:	4463      	add	r3, ip
 8000b8e:	3802      	subs	r0, #2
 8000b90:	1b9b      	subs	r3, r3, r6
 8000b92:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b96:	2100      	movs	r1, #0
 8000b98:	b11d      	cbz	r5, 8000ba2 <__udivmoddi4+0xa6>
 8000b9a:	40d3      	lsrs	r3, r2
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	e9c5 3200 	strd	r3, r2, [r5]
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	428b      	cmp	r3, r1
 8000ba8:	d905      	bls.n	8000bb6 <__udivmoddi4+0xba>
 8000baa:	b10d      	cbz	r5, 8000bb0 <__udivmoddi4+0xb4>
 8000bac:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4608      	mov	r0, r1
 8000bb4:	e7f5      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bb6:	fab3 f183 	clz	r1, r3
 8000bba:	2900      	cmp	r1, #0
 8000bbc:	d146      	bne.n	8000c4c <__udivmoddi4+0x150>
 8000bbe:	42a3      	cmp	r3, r4
 8000bc0:	d302      	bcc.n	8000bc8 <__udivmoddi4+0xcc>
 8000bc2:	4290      	cmp	r0, r2
 8000bc4:	f0c0 80f0 	bcc.w	8000da8 <__udivmoddi4+0x2ac>
 8000bc8:	1a86      	subs	r6, r0, r2
 8000bca:	eb64 0303 	sbc.w	r3, r4, r3
 8000bce:	2001      	movs	r0, #1
 8000bd0:	2d00      	cmp	r5, #0
 8000bd2:	d0e6      	beq.n	8000ba2 <__udivmoddi4+0xa6>
 8000bd4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bd8:	e7e3      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000bda:	2a00      	cmp	r2, #0
 8000bdc:	f040 8090 	bne.w	8000d00 <__udivmoddi4+0x204>
 8000be0:	eba1 040c 	sub.w	r4, r1, ip
 8000be4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000be8:	fa1f f78c 	uxth.w	r7, ip
 8000bec:	2101      	movs	r1, #1
 8000bee:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bf6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bfa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bfe:	fb07 f006 	mul.w	r0, r7, r6
 8000c02:	4298      	cmp	r0, r3
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x11c>
 8000c06:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x11a>
 8000c10:	4298      	cmp	r0, r3
 8000c12:	f200 80cd 	bhi.w	8000db0 <__udivmoddi4+0x2b4>
 8000c16:	4626      	mov	r6, r4
 8000c18:	1a1c      	subs	r4, r3, r0
 8000c1a:	fa1f f38e 	uxth.w	r3, lr
 8000c1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c22:	fb08 4410 	mls	r4, r8, r0, r4
 8000c26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c2a:	fb00 f707 	mul.w	r7, r0, r7
 8000c2e:	429f      	cmp	r7, r3
 8000c30:	d908      	bls.n	8000c44 <__udivmoddi4+0x148>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x146>
 8000c3c:	429f      	cmp	r7, r3
 8000c3e:	f200 80b0 	bhi.w	8000da2 <__udivmoddi4+0x2a6>
 8000c42:	4620      	mov	r0, r4
 8000c44:	1bdb      	subs	r3, r3, r7
 8000c46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c4a:	e7a5      	b.n	8000b98 <__udivmoddi4+0x9c>
 8000c4c:	f1c1 0620 	rsb	r6, r1, #32
 8000c50:	408b      	lsls	r3, r1
 8000c52:	fa22 f706 	lsr.w	r7, r2, r6
 8000c56:	431f      	orrs	r7, r3
 8000c58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c60:	ea43 030c 	orr.w	r3, r3, ip
 8000c64:	40f4      	lsrs	r4, r6
 8000c66:	fa00 f801 	lsl.w	r8, r0, r1
 8000c6a:	0c38      	lsrs	r0, r7, #16
 8000c6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c70:	fbb4 fef0 	udiv	lr, r4, r0
 8000c74:	fa1f fc87 	uxth.w	ip, r7
 8000c78:	fb00 441e 	mls	r4, r0, lr, r4
 8000c7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c80:	fb0e f90c 	mul.w	r9, lr, ip
 8000c84:	45a1      	cmp	r9, r4
 8000c86:	fa02 f201 	lsl.w	r2, r2, r1
 8000c8a:	d90a      	bls.n	8000ca2 <__udivmoddi4+0x1a6>
 8000c8c:	193c      	adds	r4, r7, r4
 8000c8e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c92:	f080 8084 	bcs.w	8000d9e <__udivmoddi4+0x2a2>
 8000c96:	45a1      	cmp	r9, r4
 8000c98:	f240 8081 	bls.w	8000d9e <__udivmoddi4+0x2a2>
 8000c9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ca0:	443c      	add	r4, r7
 8000ca2:	eba4 0409 	sub.w	r4, r4, r9
 8000ca6:	fa1f f983 	uxth.w	r9, r3
 8000caa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000cae:	fb00 4413 	mls	r4, r0, r3, r4
 8000cb2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000cb6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000cba:	45a4      	cmp	ip, r4
 8000cbc:	d907      	bls.n	8000cce <__udivmoddi4+0x1d2>
 8000cbe:	193c      	adds	r4, r7, r4
 8000cc0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cc4:	d267      	bcs.n	8000d96 <__udivmoddi4+0x29a>
 8000cc6:	45a4      	cmp	ip, r4
 8000cc8:	d965      	bls.n	8000d96 <__udivmoddi4+0x29a>
 8000cca:	3b02      	subs	r3, #2
 8000ccc:	443c      	add	r4, r7
 8000cce:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cd2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cd6:	eba4 040c 	sub.w	r4, r4, ip
 8000cda:	429c      	cmp	r4, r3
 8000cdc:	46ce      	mov	lr, r9
 8000cde:	469c      	mov	ip, r3
 8000ce0:	d351      	bcc.n	8000d86 <__udivmoddi4+0x28a>
 8000ce2:	d04e      	beq.n	8000d82 <__udivmoddi4+0x286>
 8000ce4:	b155      	cbz	r5, 8000cfc <__udivmoddi4+0x200>
 8000ce6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cea:	eb64 040c 	sbc.w	r4, r4, ip
 8000cee:	fa04 f606 	lsl.w	r6, r4, r6
 8000cf2:	40cb      	lsrs	r3, r1
 8000cf4:	431e      	orrs	r6, r3
 8000cf6:	40cc      	lsrs	r4, r1
 8000cf8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cfc:	2100      	movs	r1, #0
 8000cfe:	e750      	b.n	8000ba2 <__udivmoddi4+0xa6>
 8000d00:	f1c2 0320 	rsb	r3, r2, #32
 8000d04:	fa20 f103 	lsr.w	r1, r0, r3
 8000d08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d10:	4094      	lsls	r4, r2
 8000d12:	430c      	orrs	r4, r1
 8000d14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d1c:	fa1f f78c 	uxth.w	r7, ip
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3110 	mls	r1, r8, r0, r3
 8000d28:	0c23      	lsrs	r3, r4, #16
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f107 	mul.w	r1, r0, r7
 8000d32:	4299      	cmp	r1, r3
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x24c>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d3e:	d22c      	bcs.n	8000d9a <__udivmoddi4+0x29e>
 8000d40:	4299      	cmp	r1, r3
 8000d42:	d92a      	bls.n	8000d9a <__udivmoddi4+0x29e>
 8000d44:	3802      	subs	r0, #2
 8000d46:	4463      	add	r3, ip
 8000d48:	1a5b      	subs	r3, r3, r1
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d50:	fb08 3311 	mls	r3, r8, r1, r3
 8000d54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d58:	fb01 f307 	mul.w	r3, r1, r7
 8000d5c:	42a3      	cmp	r3, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x276>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d68:	d213      	bcs.n	8000d92 <__udivmoddi4+0x296>
 8000d6a:	42a3      	cmp	r3, r4
 8000d6c:	d911      	bls.n	8000d92 <__udivmoddi4+0x296>
 8000d6e:	3902      	subs	r1, #2
 8000d70:	4464      	add	r4, ip
 8000d72:	1ae4      	subs	r4, r4, r3
 8000d74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d78:	e739      	b.n	8000bee <__udivmoddi4+0xf2>
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	e6f0      	b.n	8000b60 <__udivmoddi4+0x64>
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e706      	b.n	8000b90 <__udivmoddi4+0x94>
 8000d82:	45c8      	cmp	r8, r9
 8000d84:	d2ae      	bcs.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d8e:	3801      	subs	r0, #1
 8000d90:	e7a8      	b.n	8000ce4 <__udivmoddi4+0x1e8>
 8000d92:	4631      	mov	r1, r6
 8000d94:	e7ed      	b.n	8000d72 <__udivmoddi4+0x276>
 8000d96:	4603      	mov	r3, r0
 8000d98:	e799      	b.n	8000cce <__udivmoddi4+0x1d2>
 8000d9a:	4630      	mov	r0, r6
 8000d9c:	e7d4      	b.n	8000d48 <__udivmoddi4+0x24c>
 8000d9e:	46d6      	mov	lr, sl
 8000da0:	e77f      	b.n	8000ca2 <__udivmoddi4+0x1a6>
 8000da2:	4463      	add	r3, ip
 8000da4:	3802      	subs	r0, #2
 8000da6:	e74d      	b.n	8000c44 <__udivmoddi4+0x148>
 8000da8:	4606      	mov	r6, r0
 8000daa:	4623      	mov	r3, r4
 8000dac:	4608      	mov	r0, r1
 8000dae:	e70f      	b.n	8000bd0 <__udivmoddi4+0xd4>
 8000db0:	3e02      	subs	r6, #2
 8000db2:	4463      	add	r3, ip
 8000db4:	e730      	b.n	8000c18 <__udivmoddi4+0x11c>
 8000db6:	bf00      	nop

08000db8 <__aeabi_idiv0>:
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	0000      	movs	r0, r0
	...

08000dc0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b096      	sub	sp, #88	@ 0x58
 8000dc4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dc6:	f000 fbdf 	bl	8001588 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dca:	f000 f88b 	bl	8000ee4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dce:	f000 f9a9 	bl	8001124 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000dd2:	f000 f97d 	bl	80010d0 <MX_USART2_UART_Init>
  MX_SPI3_Init();
 8000dd6:	f000 f943 	bl	8001060 <MX_SPI3_Init>
  MX_ADC1_Init();
 8000dda:	f000 f8ef 	bl	8000fbc <MX_ADC1_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int tdsValue;
	  HAL_ADC_Start(&hadc1); // Start the ADC
 8000dde:	483c      	ldr	r0, [pc, #240]	@ (8000ed0 <main+0x110>)
 8000de0:	f000 fc88 	bl	80016f4 <HAL_ADC_Start>
	  uint32_t adcValue = HAL_ADC_GetValue(&hadc1);
 8000de4:	483a      	ldr	r0, [pc, #232]	@ (8000ed0 <main+0x110>)
 8000de6:	f000 fd39 	bl	800185c <HAL_ADC_GetValue>
 8000dea:	64f8      	str	r0, [r7, #76]	@ 0x4c
	  uint16_t actualAdcValue = (uint16_t)(adcValue & 0x0FFF); // 取低12�?
 8000dec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000df4:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
	  float voltage = (actualAdcValue / 4095.0) * 3.3; // Assuming 12-bit ADC and 3.3V reference
 8000df8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	@ 0x4a
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f7ff fb99 	bl	8000534 <__aeabi_i2d>
 8000e02:	a32f      	add	r3, pc, #188	@ (adr r3, 8000ec0 <main+0x100>)
 8000e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e08:	f7ff fd28 	bl	800085c <__aeabi_ddiv>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	460b      	mov	r3, r1
 8000e10:	4610      	mov	r0, r2
 8000e12:	4619      	mov	r1, r3
 8000e14:	a32c      	add	r3, pc, #176	@ (adr r3, 8000ec8 <main+0x108>)
 8000e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e1a:	f7ff fbf5 	bl	8000608 <__aeabi_dmul>
 8000e1e:	4602      	mov	r2, r0
 8000e20:	460b      	mov	r3, r1
 8000e22:	4610      	mov	r0, r2
 8000e24:	4619      	mov	r1, r3
 8000e26:	f7ff fe01 	bl	8000a2c <__aeabi_d2f>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	647b      	str	r3, [r7, #68]	@ 0x44

	  tdsValue = (voltage * 1000) / 2; // Example conversion formula
 8000e2e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000e32:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8000ed4 <main+0x114>
 8000e36:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000e3a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8000e3e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e46:	ee17 3a90 	vmov	r3, s15
 8000e4a:	643b      	str	r3, [r7, #64]	@ 0x40
	  // HAL_UART_Transmit(&huart2, tdsValue, strlen(tdsValue), HAL_MAX_DELAY);
	  // HAL_Delay(1000);

	    // Convert TDS value to 2 bytes
	    uint8_t txData[2];
	    uint8_t rxData[2] = {0}; // Receive buffer
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	86bb      	strh	r3, [r7, #52]	@ 0x34
	    txData[0] = (tdsValue >> 8) & 0xFF; // High byte
 8000e50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e52:	121b      	asrs	r3, r3, #8
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
	    txData[1] = tdsValue & 0xFF;        // Low byte    // Convert TDS value to 2 bytes
 8000e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
	    if (HAL_SPI_TransmitReceive(&hspi3, txData, rxData, sizeof(txData), HAL_MAX_DELAY) != HAL_OK)
 8000e62:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8000e66:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000e6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	2302      	movs	r3, #2
 8000e72:	4819      	ldr	r0, [pc, #100]	@ (8000ed8 <main+0x118>)
 8000e74:	f001 fec3 	bl	8002bfe <HAL_SPI_TransmitReceive>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <main+0xc2>
	        {
	            // Handle transmission/reception error
	            Error_Handler();
 8000e7e:	f000 f9bf 	bl	8001200 <Error_Handler>
	        }
	    // Combine received bytes into an integer (if needed)
	    int receivedValue = (rxData[0] << 8) | rxData[1];
 8000e82:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000e86:	021b      	lsls	r3, r3, #8
 8000e88:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c

	    // Debug output (optional)
	    char buffer[50];
	    snprintf(buffer, sizeof(buffer), "Sent: %d, Received: %d\r\n", tdsValue, receivedValue);
 8000e90:	4638      	mov	r0, r7
 8000e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000e98:	4a10      	ldr	r2, [pc, #64]	@ (8000edc <main+0x11c>)
 8000e9a:	2132      	movs	r1, #50	@ 0x32
 8000e9c:	f002 fd40 	bl	8003920 <sniprintf>
	    HAL_UART_Transmit(&huart2, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000ea0:	463b      	mov	r3, r7
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff f99c 	bl	80001e0 <strlen>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	b29a      	uxth	r2, r3
 8000eac:	4639      	mov	r1, r7
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	480b      	ldr	r0, [pc, #44]	@ (8000ee0 <main+0x120>)
 8000eb4:	f002 f978 	bl	80031a8 <HAL_UART_Transmit>
  {
 8000eb8:	e791      	b.n	8000dde <main+0x1e>
 8000eba:	bf00      	nop
 8000ebc:	f3af 8000 	nop.w
 8000ec0:	00000000 	.word	0x00000000
 8000ec4:	40affe00 	.word	0x40affe00
 8000ec8:	66666666 	.word	0x66666666
 8000ecc:	400a6666 	.word	0x400a6666
 8000ed0:	20000078 	.word	0x20000078
 8000ed4:	447a0000 	.word	0x447a0000
 8000ed8:	200000c0 	.word	0x200000c0
 8000edc:	080042a0 	.word	0x080042a0
 8000ee0:	20000118 	.word	0x20000118

08000ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b094      	sub	sp, #80	@ 0x50
 8000ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eea:	f107 0320 	add.w	r3, r7, #32
 8000eee:	2230      	movs	r2, #48	@ 0x30
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f002 fd48 	bl	8003988 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	4b29      	ldr	r3, [pc, #164]	@ (8000fb4 <SystemClock_Config+0xd0>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f10:	4a28      	ldr	r2, [pc, #160]	@ (8000fb4 <SystemClock_Config+0xd0>)
 8000f12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f18:	4b26      	ldr	r3, [pc, #152]	@ (8000fb4 <SystemClock_Config+0xd0>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	4b23      	ldr	r3, [pc, #140]	@ (8000fb8 <SystemClock_Config+0xd4>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f30:	4a21      	ldr	r2, [pc, #132]	@ (8000fb8 <SystemClock_Config+0xd4>)
 8000f32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb8 <SystemClock_Config+0xd4>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f44:	2302      	movs	r3, #2
 8000f46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f4c:	2310      	movs	r3, #16
 8000f4e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f50:	2302      	movs	r3, #2
 8000f52:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f54:	2300      	movs	r3, #0
 8000f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f58:	2310      	movs	r3, #16
 8000f5a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f5c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000f60:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f62:	2304      	movs	r3, #4
 8000f64:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f66:	2307      	movs	r3, #7
 8000f68:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6a:	f107 0320 	add.w	r3, r7, #32
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 f924 	bl	80021bc <HAL_RCC_OscConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000f7a:	f000 f941 	bl	8001200 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f7e:	230f      	movs	r3, #15
 8000f80:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f82:	2302      	movs	r3, #2
 8000f84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f86:	2300      	movs	r3, #0
 8000f88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f94:	f107 030c 	add.w	r3, r7, #12
 8000f98:	2102      	movs	r1, #2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 fb86 	bl	80026ac <HAL_RCC_ClockConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000fa6:	f000 f92b 	bl	8001200 <Error_Handler>
  }
}
 8000faa:	bf00      	nop
 8000fac:	3750      	adds	r7, #80	@ 0x50
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40023800 	.word	0x40023800
 8000fb8:	40007000 	.word	0x40007000

08000fbc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b084      	sub	sp, #16
 8000fc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc2:	463b      	mov	r3, r7
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fce:	4b21      	ldr	r3, [pc, #132]	@ (8001054 <MX_ADC1_Init+0x98>)
 8000fd0:	4a21      	ldr	r2, [pc, #132]	@ (8001058 <MX_ADC1_Init+0x9c>)
 8000fd2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fd4:	4b1f      	ldr	r3, [pc, #124]	@ (8001054 <MX_ADC1_Init+0x98>)
 8000fd6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000fda:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001054 <MX_ADC1_Init+0x98>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fe2:	4b1c      	ldr	r3, [pc, #112]	@ (8001054 <MX_ADC1_Init+0x98>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8001054 <MX_ADC1_Init+0x98>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fee:	4b19      	ldr	r3, [pc, #100]	@ (8001054 <MX_ADC1_Init+0x98>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ff6:	4b17      	ldr	r3, [pc, #92]	@ (8001054 <MX_ADC1_Init+0x98>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ffc:	4b15      	ldr	r3, [pc, #84]	@ (8001054 <MX_ADC1_Init+0x98>)
 8000ffe:	4a17      	ldr	r2, [pc, #92]	@ (800105c <MX_ADC1_Init+0xa0>)
 8001000:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001002:	4b14      	ldr	r3, [pc, #80]	@ (8001054 <MX_ADC1_Init+0x98>)
 8001004:	2200      	movs	r2, #0
 8001006:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001008:	4b12      	ldr	r3, [pc, #72]	@ (8001054 <MX_ADC1_Init+0x98>)
 800100a:	2201      	movs	r2, #1
 800100c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800100e:	4b11      	ldr	r3, [pc, #68]	@ (8001054 <MX_ADC1_Init+0x98>)
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001016:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <MX_ADC1_Init+0x98>)
 8001018:	2201      	movs	r2, #1
 800101a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800101c:	480d      	ldr	r0, [pc, #52]	@ (8001054 <MX_ADC1_Init+0x98>)
 800101e:	f000 fb25 	bl	800166c <HAL_ADC_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001028:	f000 f8ea 	bl	8001200 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800102c:	2300      	movs	r3, #0
 800102e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001030:	2301      	movs	r3, #1
 8001032:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001034:	2300      	movs	r3, #0
 8001036:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001038:	463b      	mov	r3, r7
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	@ (8001054 <MX_ADC1_Init+0x98>)
 800103e:	f000 fc1b 	bl	8001878 <HAL_ADC_ConfigChannel>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001048:	f000 f8da 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800104c:	bf00      	nop
 800104e:	3710      	adds	r7, #16
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000078 	.word	0x20000078
 8001058:	40012000 	.word	0x40012000
 800105c:	0f000001 	.word	0x0f000001

08001060 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001064:	4b18      	ldr	r3, [pc, #96]	@ (80010c8 <MX_SPI3_Init+0x68>)
 8001066:	4a19      	ldr	r2, [pc, #100]	@ (80010cc <MX_SPI3_Init+0x6c>)
 8001068:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800106a:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <MX_SPI3_Init+0x68>)
 800106c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001070:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8001072:	4b15      	ldr	r3, [pc, #84]	@ (80010c8 <MX_SPI3_Init+0x68>)
 8001074:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001078:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800107a:	4b13      	ldr	r3, [pc, #76]	@ (80010c8 <MX_SPI3_Init+0x68>)
 800107c:	2200      	movs	r2, #0
 800107e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001080:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <MX_SPI3_Init+0x68>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001086:	4b10      	ldr	r3, [pc, #64]	@ (80010c8 <MX_SPI3_Init+0x68>)
 8001088:	2200      	movs	r2, #0
 800108a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800108c:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <MX_SPI3_Init+0x68>)
 800108e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001092:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001094:	4b0c      	ldr	r3, [pc, #48]	@ (80010c8 <MX_SPI3_Init+0x68>)
 8001096:	2200      	movs	r2, #0
 8001098:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800109a:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <MX_SPI3_Init+0x68>)
 800109c:	2200      	movs	r2, #0
 800109e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010a0:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <MX_SPI3_Init+0x68>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010a6:	4b08      	ldr	r3, [pc, #32]	@ (80010c8 <MX_SPI3_Init+0x68>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80010ac:	4b06      	ldr	r3, [pc, #24]	@ (80010c8 <MX_SPI3_Init+0x68>)
 80010ae:	220a      	movs	r2, #10
 80010b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010b2:	4805      	ldr	r0, [pc, #20]	@ (80010c8 <MX_SPI3_Init+0x68>)
 80010b4:	f001 fd1a 	bl	8002aec <HAL_SPI_Init>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_SPI3_Init+0x62>
  {
    Error_Handler();
 80010be:	f000 f89f 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010c2:	bf00      	nop
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	200000c0 	.word	0x200000c0
 80010cc:	40003c00 	.word	0x40003c00

080010d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010d4:	4b11      	ldr	r3, [pc, #68]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 80010d6:	4a12      	ldr	r2, [pc, #72]	@ (8001120 <MX_USART2_UART_Init+0x50>)
 80010d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80010da:	4b10      	ldr	r3, [pc, #64]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 80010dc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80010e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80010e8:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80010ee:	4b0b      	ldr	r3, [pc, #44]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010f4:	4b09      	ldr	r3, [pc, #36]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 80010f6:	220c      	movs	r2, #12
 80010f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010fa:	4b08      	ldr	r3, [pc, #32]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001100:	4b06      	ldr	r3, [pc, #24]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 8001102:	2200      	movs	r2, #0
 8001104:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001106:	4805      	ldr	r0, [pc, #20]	@ (800111c <MX_USART2_UART_Init+0x4c>)
 8001108:	f001 fffe 	bl	8003108 <HAL_UART_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001112:	f000 f875 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000118 	.word	0x20000118
 8001120:	40004400 	.word	0x40004400

08001124 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	@ 0x28
 8001128:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	4b2d      	ldr	r3, [pc, #180]	@ (80011f4 <MX_GPIO_Init+0xd0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a2c      	ldr	r2, [pc, #176]	@ (80011f4 <MX_GPIO_Init+0xd0>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b2a      	ldr	r3, [pc, #168]	@ (80011f4 <MX_GPIO_Init+0xd0>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b26      	ldr	r3, [pc, #152]	@ (80011f4 <MX_GPIO_Init+0xd0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a25      	ldr	r2, [pc, #148]	@ (80011f4 <MX_GPIO_Init+0xd0>)
 8001160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b23      	ldr	r3, [pc, #140]	@ (80011f4 <MX_GPIO_Init+0xd0>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	4b1f      	ldr	r3, [pc, #124]	@ (80011f4 <MX_GPIO_Init+0xd0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a1e      	ldr	r2, [pc, #120]	@ (80011f4 <MX_GPIO_Init+0xd0>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b1c      	ldr	r3, [pc, #112]	@ (80011f4 <MX_GPIO_Init+0xd0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b18      	ldr	r3, [pc, #96]	@ (80011f4 <MX_GPIO_Init+0xd0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a17      	ldr	r2, [pc, #92]	@ (80011f4 <MX_GPIO_Init+0xd0>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <MX_GPIO_Init+0xd0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2120      	movs	r1, #32
 80011ae:	4812      	ldr	r0, [pc, #72]	@ (80011f8 <MX_GPIO_Init+0xd4>)
 80011b0:	f000 ffea 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011ba:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011c4:	f107 0314 	add.w	r3, r7, #20
 80011c8:	4619      	mov	r1, r3
 80011ca:	480c      	ldr	r0, [pc, #48]	@ (80011fc <MX_GPIO_Init+0xd8>)
 80011cc:	f000 fe58 	bl	8001e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011d0:	2320      	movs	r3, #32
 80011d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d4:	2301      	movs	r3, #1
 80011d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4619      	mov	r1, r3
 80011e6:	4804      	ldr	r0, [pc, #16]	@ (80011f8 <MX_GPIO_Init+0xd4>)
 80011e8:	f000 fe4a 	bl	8001e80 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80011ec:	bf00      	nop
 80011ee:	3728      	adds	r7, #40	@ 0x28
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	40023800 	.word	0x40023800
 80011f8:	40020000 	.word	0x40020000
 80011fc:	40020800 	.word	0x40020800

08001200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001204:	b672      	cpsid	i
}
 8001206:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001208:	bf00      	nop
 800120a:	e7fd      	b.n	8001208 <Error_Handler+0x8>

0800120c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	4b10      	ldr	r3, [pc, #64]	@ (8001258 <HAL_MspInit+0x4c>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121a:	4a0f      	ldr	r2, [pc, #60]	@ (8001258 <HAL_MspInit+0x4c>)
 800121c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001220:	6453      	str	r3, [r2, #68]	@ 0x44
 8001222:	4b0d      	ldr	r3, [pc, #52]	@ (8001258 <HAL_MspInit+0x4c>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001226:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	603b      	str	r3, [r7, #0]
 8001232:	4b09      	ldr	r3, [pc, #36]	@ (8001258 <HAL_MspInit+0x4c>)
 8001234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001236:	4a08      	ldr	r2, [pc, #32]	@ (8001258 <HAL_MspInit+0x4c>)
 8001238:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800123c:	6413      	str	r3, [r2, #64]	@ 0x40
 800123e:	4b06      	ldr	r3, [pc, #24]	@ (8001258 <HAL_MspInit+0x4c>)
 8001240:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001242:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001246:	603b      	str	r3, [r7, #0]
 8001248:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800124a:	2007      	movs	r0, #7
 800124c:	f000 fde4 	bl	8001e18 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	40023800 	.word	0x40023800

0800125c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b08a      	sub	sp, #40	@ 0x28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001264:	f107 0314 	add.w	r3, r7, #20
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a17      	ldr	r2, [pc, #92]	@ (80012d8 <HAL_ADC_MspInit+0x7c>)
 800127a:	4293      	cmp	r3, r2
 800127c:	d127      	bne.n	80012ce <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800127e:	2300      	movs	r3, #0
 8001280:	613b      	str	r3, [r7, #16]
 8001282:	4b16      	ldr	r3, [pc, #88]	@ (80012dc <HAL_ADC_MspInit+0x80>)
 8001284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001286:	4a15      	ldr	r2, [pc, #84]	@ (80012dc <HAL_ADC_MspInit+0x80>)
 8001288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800128c:	6453      	str	r3, [r2, #68]	@ 0x44
 800128e:	4b13      	ldr	r3, [pc, #76]	@ (80012dc <HAL_ADC_MspInit+0x80>)
 8001290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001292:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001296:	613b      	str	r3, [r7, #16]
 8001298:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129a:	2300      	movs	r3, #0
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	4b0f      	ldr	r3, [pc, #60]	@ (80012dc <HAL_ADC_MspInit+0x80>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	4a0e      	ldr	r2, [pc, #56]	@ (80012dc <HAL_ADC_MspInit+0x80>)
 80012a4:	f043 0301 	orr.w	r3, r3, #1
 80012a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012aa:	4b0c      	ldr	r3, [pc, #48]	@ (80012dc <HAL_ADC_MspInit+0x80>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	60fb      	str	r3, [r7, #12]
 80012b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012b6:	2301      	movs	r3, #1
 80012b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ba:	2303      	movs	r3, #3
 80012bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	4805      	ldr	r0, [pc, #20]	@ (80012e0 <HAL_ADC_MspInit+0x84>)
 80012ca:	f000 fdd9 	bl	8001e80 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80012ce:	bf00      	nop
 80012d0:	3728      	adds	r7, #40	@ 0x28
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40012000 	.word	0x40012000
 80012dc:	40023800 	.word	0x40023800
 80012e0:	40020000 	.word	0x40020000

080012e4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	@ 0x28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a28      	ldr	r2, [pc, #160]	@ (80013a4 <HAL_SPI_MspInit+0xc0>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d14a      	bne.n	800139c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	4b27      	ldr	r3, [pc, #156]	@ (80013a8 <HAL_SPI_MspInit+0xc4>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	4a26      	ldr	r2, [pc, #152]	@ (80013a8 <HAL_SPI_MspInit+0xc4>)
 8001310:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001314:	6413      	str	r3, [r2, #64]	@ 0x40
 8001316:	4b24      	ldr	r3, [pc, #144]	@ (80013a8 <HAL_SPI_MspInit+0xc4>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b20      	ldr	r3, [pc, #128]	@ (80013a8 <HAL_SPI_MspInit+0xc4>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a1f      	ldr	r2, [pc, #124]	@ (80013a8 <HAL_SPI_MspInit+0xc4>)
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b1d      	ldr	r3, [pc, #116]	@ (80013a8 <HAL_SPI_MspInit+0xc4>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60bb      	str	r3, [r7, #8]
 8001342:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <HAL_SPI_MspInit+0xc4>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a18      	ldr	r2, [pc, #96]	@ (80013a8 <HAL_SPI_MspInit+0xc4>)
 8001348:	f043 0302 	orr.w	r3, r3, #2
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <HAL_SPI_MspInit+0xc4>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB4     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800135a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800135e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001360:	2302      	movs	r3, #2
 8001362:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001368:	2303      	movs	r3, #3
 800136a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800136c:	2306      	movs	r3, #6
 800136e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	4619      	mov	r1, r3
 8001376:	480d      	ldr	r0, [pc, #52]	@ (80013ac <HAL_SPI_MspInit+0xc8>)
 8001378:	f000 fd82 	bl	8001e80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800137c:	2330      	movs	r3, #48	@ 0x30
 800137e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001388:	2303      	movs	r3, #3
 800138a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800138c:	2306      	movs	r3, #6
 800138e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4619      	mov	r1, r3
 8001396:	4806      	ldr	r0, [pc, #24]	@ (80013b0 <HAL_SPI_MspInit+0xcc>)
 8001398:	f000 fd72 	bl	8001e80 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 800139c:	bf00      	nop
 800139e:	3728      	adds	r7, #40	@ 0x28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40003c00 	.word	0x40003c00
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40020800 	.word	0x40020800
 80013b0:	40020400 	.word	0x40020400

080013b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08a      	sub	sp, #40	@ 0x28
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0314 	add.w	r3, r7, #20
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a19      	ldr	r2, [pc, #100]	@ (8001438 <HAL_UART_MspInit+0x84>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d12b      	bne.n	800142e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	613b      	str	r3, [r7, #16]
 80013da:	4b18      	ldr	r3, [pc, #96]	@ (800143c <HAL_UART_MspInit+0x88>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	4a17      	ldr	r2, [pc, #92]	@ (800143c <HAL_UART_MspInit+0x88>)
 80013e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013e6:	4b15      	ldr	r3, [pc, #84]	@ (800143c <HAL_UART_MspInit+0x88>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ee:	613b      	str	r3, [r7, #16]
 80013f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	60fb      	str	r3, [r7, #12]
 80013f6:	4b11      	ldr	r3, [pc, #68]	@ (800143c <HAL_UART_MspInit+0x88>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4a10      	ldr	r2, [pc, #64]	@ (800143c <HAL_UART_MspInit+0x88>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <HAL_UART_MspInit+0x88>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
 800140c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800140e:	230c      	movs	r3, #12
 8001410:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800141e:	2307      	movs	r3, #7
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 0314 	add.w	r3, r7, #20
 8001426:	4619      	mov	r1, r3
 8001428:	4805      	ldr	r0, [pc, #20]	@ (8001440 <HAL_UART_MspInit+0x8c>)
 800142a:	f000 fd29 	bl	8001e80 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800142e:	bf00      	nop
 8001430:	3728      	adds	r7, #40	@ 0x28
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40004400 	.word	0x40004400
 800143c:	40023800 	.word	0x40023800
 8001440:	40020000 	.word	0x40020000

08001444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <NMI_Handler+0x4>

0800144c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <HardFault_Handler+0x4>

08001454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001458:	bf00      	nop
 800145a:	e7fd      	b.n	8001458 <MemManage_Handler+0x4>

0800145c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001460:	bf00      	nop
 8001462:	e7fd      	b.n	8001460 <BusFault_Handler+0x4>

08001464 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001468:	bf00      	nop
 800146a:	e7fd      	b.n	8001468 <UsageFault_Handler+0x4>

0800146c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800149a:	f000 f8c7 	bl	800162c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b086      	sub	sp, #24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014ac:	4a14      	ldr	r2, [pc, #80]	@ (8001500 <_sbrk+0x5c>)
 80014ae:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <_sbrk+0x60>)
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014b8:	4b13      	ldr	r3, [pc, #76]	@ (8001508 <_sbrk+0x64>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d102      	bne.n	80014c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c0:	4b11      	ldr	r3, [pc, #68]	@ (8001508 <_sbrk+0x64>)
 80014c2:	4a12      	ldr	r2, [pc, #72]	@ (800150c <_sbrk+0x68>)
 80014c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014c6:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <_sbrk+0x64>)
 80014c8:	681a      	ldr	r2, [r3, #0]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d207      	bcs.n	80014e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d4:	f002 fa60 	bl	8003998 <__errno>
 80014d8:	4603      	mov	r3, r0
 80014da:	220c      	movs	r2, #12
 80014dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	e009      	b.n	80014f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e4:	4b08      	ldr	r3, [pc, #32]	@ (8001508 <_sbrk+0x64>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ea:	4b07      	ldr	r3, [pc, #28]	@ (8001508 <_sbrk+0x64>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	4a05      	ldr	r2, [pc, #20]	@ (8001508 <_sbrk+0x64>)
 80014f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014f6:	68fb      	ldr	r3, [r7, #12]
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	20018000 	.word	0x20018000
 8001504:	00000400 	.word	0x00000400
 8001508:	20000160 	.word	0x20000160
 800150c:	200002b0 	.word	0x200002b0

08001510 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001514:	4b06      	ldr	r3, [pc, #24]	@ (8001530 <SystemInit+0x20>)
 8001516:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800151a:	4a05      	ldr	r2, [pc, #20]	@ (8001530 <SystemInit+0x20>)
 800151c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001520:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001534:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800156c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001538:	f7ff ffea 	bl	8001510 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800153c:	480c      	ldr	r0, [pc, #48]	@ (8001570 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800153e:	490d      	ldr	r1, [pc, #52]	@ (8001574 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001540:	4a0d      	ldr	r2, [pc, #52]	@ (8001578 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001544:	e002      	b.n	800154c <LoopCopyDataInit>

08001546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154a:	3304      	adds	r3, #4

0800154c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800154c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800154e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001550:	d3f9      	bcc.n	8001546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001552:	4a0a      	ldr	r2, [pc, #40]	@ (800157c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001554:	4c0a      	ldr	r4, [pc, #40]	@ (8001580 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001558:	e001      	b.n	800155e <LoopFillZerobss>

0800155a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800155c:	3204      	adds	r2, #4

0800155e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800155e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001560:	d3fb      	bcc.n	800155a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001562:	f002 fa1f 	bl	80039a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001566:	f7ff fc2b 	bl	8000dc0 <main>
  bx  lr    
 800156a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800156c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001574:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001578:	08004318 	.word	0x08004318
  ldr r2, =_sbss
 800157c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001580:	200002b0 	.word	0x200002b0

08001584 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001584:	e7fe      	b.n	8001584 <ADC_IRQHandler>
	...

08001588 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800158c:	4b0e      	ldr	r3, [pc, #56]	@ (80015c8 <HAL_Init+0x40>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0d      	ldr	r2, [pc, #52]	@ (80015c8 <HAL_Init+0x40>)
 8001592:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001596:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001598:	4b0b      	ldr	r3, [pc, #44]	@ (80015c8 <HAL_Init+0x40>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0a      	ldr	r2, [pc, #40]	@ (80015c8 <HAL_Init+0x40>)
 800159e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a4:	4b08      	ldr	r3, [pc, #32]	@ (80015c8 <HAL_Init+0x40>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a07      	ldr	r2, [pc, #28]	@ (80015c8 <HAL_Init+0x40>)
 80015aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b0:	2003      	movs	r0, #3
 80015b2:	f000 fc31 	bl	8001e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015b6:	2000      	movs	r0, #0
 80015b8:	f000 f808 	bl	80015cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015bc:	f7ff fe26 	bl	800120c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c0:	2300      	movs	r3, #0
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023c00 	.word	0x40023c00

080015cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b082      	sub	sp, #8
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d4:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <HAL_InitTick+0x54>)
 80015d6:	681a      	ldr	r2, [r3, #0]
 80015d8:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <HAL_InitTick+0x58>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 fc3b 	bl	8001e66 <HAL_SYSTICK_Config>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e00e      	b.n	8001618 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2b0f      	cmp	r3, #15
 80015fe:	d80a      	bhi.n	8001616 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001600:	2200      	movs	r2, #0
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
 8001608:	f000 fc11 	bl	8001e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800160c:	4a06      	ldr	r2, [pc, #24]	@ (8001628 <HAL_InitTick+0x5c>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001612:	2300      	movs	r3, #0
 8001614:	e000      	b.n	8001618 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
}
 8001618:	4618      	mov	r0, r3
 800161a:	3708      	adds	r7, #8
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	20000000 	.word	0x20000000
 8001624:	20000008 	.word	0x20000008
 8001628:	20000004 	.word	0x20000004

0800162c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <HAL_IncTick+0x20>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <HAL_IncTick+0x24>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4413      	add	r3, r2
 800163c:	4a04      	ldr	r2, [pc, #16]	@ (8001650 <HAL_IncTick+0x24>)
 800163e:	6013      	str	r3, [r2, #0]
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	20000008 	.word	0x20000008
 8001650:	20000164 	.word	0x20000164

08001654 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return uwTick;
 8001658:	4b03      	ldr	r3, [pc, #12]	@ (8001668 <HAL_GetTick+0x14>)
 800165a:	681b      	ldr	r3, [r3, #0]
}
 800165c:	4618      	mov	r0, r3
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	20000164 	.word	0x20000164

0800166c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e033      	b.n	80016ea <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	2b00      	cmp	r3, #0
 8001688:	d109      	bne.n	800169e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff fde6 	bl	800125c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2200      	movs	r2, #0
 8001694:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	f003 0310 	and.w	r3, r3, #16
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d118      	bne.n	80016dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016b2:	f023 0302 	bic.w	r3, r3, #2
 80016b6:	f043 0202 	orr.w	r2, r3, #2
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 f9fc 	bl	8001abc <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ce:	f023 0303 	bic.w	r3, r3, #3
 80016d2:	f043 0201 	orr.w	r2, r3, #1
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	641a      	str	r2, [r3, #64]	@ 0x40
 80016da:	e001      	b.n	80016e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001706:	2b01      	cmp	r3, #1
 8001708:	d101      	bne.n	800170e <HAL_ADC_Start+0x1a>
 800170a:	2302      	movs	r3, #2
 800170c:	e097      	b.n	800183e <HAL_ADC_Start+0x14a>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b01      	cmp	r3, #1
 8001722:	d018      	beq.n	8001756 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f042 0201 	orr.w	r2, r2, #1
 8001732:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001734:	4b45      	ldr	r3, [pc, #276]	@ (800184c <HAL_ADC_Start+0x158>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a45      	ldr	r2, [pc, #276]	@ (8001850 <HAL_ADC_Start+0x15c>)
 800173a:	fba2 2303 	umull	r2, r3, r2, r3
 800173e:	0c9a      	lsrs	r2, r3, #18
 8001740:	4613      	mov	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001748:	e002      	b.n	8001750 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	3b01      	subs	r3, #1
 800174e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f9      	bne.n	800174a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	689b      	ldr	r3, [r3, #8]
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	2b01      	cmp	r3, #1
 8001762:	d15f      	bne.n	8001824 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001768:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800176c:	f023 0301 	bic.w	r3, r3, #1
 8001770:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001782:	2b00      	cmp	r3, #0
 8001784:	d007      	beq.n	8001796 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800178e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800179e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017a2:	d106      	bne.n	80017b2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a8:	f023 0206 	bic.w	r2, r3, #6
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	645a      	str	r2, [r3, #68]	@ 0x44
 80017b0:	e002      	b.n	80017b8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017c0:	4b24      	ldr	r3, [pc, #144]	@ (8001854 <HAL_ADC_Start+0x160>)
 80017c2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80017cc:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 031f 	and.w	r3, r3, #31
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10f      	bne.n	80017fa <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d129      	bne.n	800183c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	e020      	b.n	800183c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a16      	ldr	r2, [pc, #88]	@ (8001858 <HAL_ADC_Start+0x164>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d11b      	bne.n	800183c <HAL_ADC_Start+0x148>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800180e:	2b00      	cmp	r3, #0
 8001810:	d114      	bne.n	800183c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001820:	609a      	str	r2, [r3, #8]
 8001822:	e00b      	b.n	800183c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001828:	f043 0210 	orr.w	r2, r3, #16
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001834:	f043 0201 	orr.w	r2, r3, #1
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800183c:	2300      	movs	r3, #0
}
 800183e:	4618      	mov	r0, r3
 8001840:	3714      	adds	r7, #20
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	20000000 	.word	0x20000000
 8001850:	431bde83 	.word	0x431bde83
 8001854:	40012300 	.word	0x40012300
 8001858:	40012000 	.word	0x40012000

0800185c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800186a:	4618      	mov	r0, r3
 800186c:	370c      	adds	r7, #12
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
	...

08001878 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
 8001880:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001882:	2300      	movs	r3, #0
 8001884:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800188c:	2b01      	cmp	r3, #1
 800188e:	d101      	bne.n	8001894 <HAL_ADC_ConfigChannel+0x1c>
 8001890:	2302      	movs	r3, #2
 8001892:	e105      	b.n	8001aa0 <HAL_ADC_ConfigChannel+0x228>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b09      	cmp	r3, #9
 80018a2:	d925      	bls.n	80018f0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	68d9      	ldr	r1, [r3, #12]
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	461a      	mov	r2, r3
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	3b1e      	subs	r3, #30
 80018ba:	2207      	movs	r2, #7
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43da      	mvns	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	400a      	ands	r2, r1
 80018c8:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68d9      	ldr	r1, [r3, #12]
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	689a      	ldr	r2, [r3, #8]
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	b29b      	uxth	r3, r3
 80018da:	4618      	mov	r0, r3
 80018dc:	4603      	mov	r3, r0
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	4403      	add	r3, r0
 80018e2:	3b1e      	subs	r3, #30
 80018e4:	409a      	lsls	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	60da      	str	r2, [r3, #12]
 80018ee:	e022      	b.n	8001936 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6919      	ldr	r1, [r3, #16]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	461a      	mov	r2, r3
 80018fe:	4613      	mov	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	2207      	movs	r2, #7
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43da      	mvns	r2, r3
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	400a      	ands	r2, r1
 8001912:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6919      	ldr	r1, [r3, #16]
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	b29b      	uxth	r3, r3
 8001924:	4618      	mov	r0, r3
 8001926:	4603      	mov	r3, r0
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	4403      	add	r3, r0
 800192c:	409a      	lsls	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	2b06      	cmp	r3, #6
 800193c:	d824      	bhi.n	8001988 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685a      	ldr	r2, [r3, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	4413      	add	r3, r2
 800194e:	3b05      	subs	r3, #5
 8001950:	221f      	movs	r2, #31
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43da      	mvns	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	400a      	ands	r2, r1
 800195e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	b29b      	uxth	r3, r3
 800196c:	4618      	mov	r0, r3
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	3b05      	subs	r3, #5
 800197a:	fa00 f203 	lsl.w	r2, r0, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	430a      	orrs	r2, r1
 8001984:	635a      	str	r2, [r3, #52]	@ 0x34
 8001986:	e04c      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	2b0c      	cmp	r3, #12
 800198e:	d824      	bhi.n	80019da <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	3b23      	subs	r3, #35	@ 0x23
 80019a2:	221f      	movs	r2, #31
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43da      	mvns	r2, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	400a      	ands	r2, r1
 80019b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	b29b      	uxth	r3, r3
 80019be:	4618      	mov	r0, r3
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	3b23      	subs	r3, #35	@ 0x23
 80019cc:	fa00 f203 	lsl.w	r2, r0, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	430a      	orrs	r2, r1
 80019d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80019d8:	e023      	b.n	8001a22 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685a      	ldr	r2, [r3, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	4413      	add	r3, r2
 80019ea:	3b41      	subs	r3, #65	@ 0x41
 80019ec:	221f      	movs	r2, #31
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43da      	mvns	r2, r3
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	400a      	ands	r2, r1
 80019fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	b29b      	uxth	r3, r3
 8001a08:	4618      	mov	r0, r3
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685a      	ldr	r2, [r3, #4]
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	3b41      	subs	r3, #65	@ 0x41
 8001a16:	fa00 f203 	lsl.w	r2, r0, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a22:	4b22      	ldr	r3, [pc, #136]	@ (8001aac <HAL_ADC_ConfigChannel+0x234>)
 8001a24:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a21      	ldr	r2, [pc, #132]	@ (8001ab0 <HAL_ADC_ConfigChannel+0x238>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d109      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x1cc>
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b12      	cmp	r3, #18
 8001a36:	d105      	bne.n	8001a44 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a19      	ldr	r2, [pc, #100]	@ (8001ab0 <HAL_ADC_ConfigChannel+0x238>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d123      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x21e>
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	2b10      	cmp	r3, #16
 8001a54:	d003      	beq.n	8001a5e <HAL_ADC_ConfigChannel+0x1e6>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b11      	cmp	r3, #17
 8001a5c:	d11b      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	2b10      	cmp	r3, #16
 8001a70:	d111      	bne.n	8001a96 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a72:	4b10      	ldr	r3, [pc, #64]	@ (8001ab4 <HAL_ADC_ConfigChannel+0x23c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a10      	ldr	r2, [pc, #64]	@ (8001ab8 <HAL_ADC_ConfigChannel+0x240>)
 8001a78:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7c:	0c9a      	lsrs	r2, r3, #18
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a88:	e002      	b.n	8001a90 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1f9      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a9e:	2300      	movs	r3, #0
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	3714      	adds	r7, #20
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	40012300 	.word	0x40012300
 8001ab0:	40012000 	.word	0x40012000
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	431bde83 	.word	0x431bde83

08001abc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ac4:	4b79      	ldr	r3, [pc, #484]	@ (8001cac <ADC_Init+0x1f0>)
 8001ac6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	431a      	orrs	r2, r3
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001af0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	6859      	ldr	r1, [r3, #4]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	021a      	lsls	r2, r3, #8
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	685a      	ldr	r2, [r3, #4]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001b14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	6859      	ldr	r1, [r3, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689a      	ldr	r2, [r3, #8]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	430a      	orrs	r2, r1
 8001b26:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001b36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	6899      	ldr	r1, [r3, #8]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68da      	ldr	r2, [r3, #12]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	430a      	orrs	r2, r1
 8001b48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4e:	4a58      	ldr	r2, [pc, #352]	@ (8001cb0 <ADC_Init+0x1f4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d022      	beq.n	8001b9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001b62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6899      	ldr	r1, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	689a      	ldr	r2, [r3, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001b84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6899      	ldr	r1, [r3, #8]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	430a      	orrs	r2, r1
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	e00f      	b.n	8001bba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ba8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001bb8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	689a      	ldr	r2, [r3, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f022 0202 	bic.w	r2, r2, #2
 8001bc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	6899      	ldr	r1, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	7e1b      	ldrb	r3, [r3, #24]
 8001bd4:	005a      	lsls	r2, r3, #1
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d01b      	beq.n	8001c20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001bf6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001c06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	6859      	ldr	r1, [r3, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c12:	3b01      	subs	r3, #1
 8001c14:	035a      	lsls	r2, r3, #13
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	605a      	str	r2, [r3, #4]
 8001c1e:	e007      	b.n	8001c30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c2e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	051a      	lsls	r2, r3, #20
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	6899      	ldr	r1, [r3, #8]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c72:	025a      	lsls	r2, r3, #9
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	689a      	ldr	r2, [r3, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6899      	ldr	r1, [r3, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	029a      	lsls	r2, r3, #10
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	430a      	orrs	r2, r1
 8001c9e:	609a      	str	r2, [r3, #8]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	40012300 	.word	0x40012300
 8001cb0:	0f000001 	.word	0x0f000001

08001cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cca:	68ba      	ldr	r2, [r7, #8]
 8001ccc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce6:	4a04      	ldr	r2, [pc, #16]	@ (8001cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	60d3      	str	r3, [r2, #12]
}
 8001cec:	bf00      	nop
 8001cee:	3714      	adds	r7, #20
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d00:	4b04      	ldr	r3, [pc, #16]	@ (8001d14 <__NVIC_GetPriorityGrouping+0x18>)
 8001d02:	68db      	ldr	r3, [r3, #12]
 8001d04:	0a1b      	lsrs	r3, r3, #8
 8001d06:	f003 0307 	and.w	r3, r3, #7
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	db0a      	blt.n	8001d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	b2da      	uxtb	r2, r3
 8001d30:	490c      	ldr	r1, [pc, #48]	@ (8001d64 <__NVIC_SetPriority+0x4c>)
 8001d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d36:	0112      	lsls	r2, r2, #4
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	440b      	add	r3, r1
 8001d3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d40:	e00a      	b.n	8001d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	b2da      	uxtb	r2, r3
 8001d46:	4908      	ldr	r1, [pc, #32]	@ (8001d68 <__NVIC_SetPriority+0x50>)
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	3b04      	subs	r3, #4
 8001d50:	0112      	lsls	r2, r2, #4
 8001d52:	b2d2      	uxtb	r2, r2
 8001d54:	440b      	add	r3, r1
 8001d56:	761a      	strb	r2, [r3, #24]
}
 8001d58:	bf00      	nop
 8001d5a:	370c      	adds	r7, #12
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d62:	4770      	bx	lr
 8001d64:	e000e100 	.word	0xe000e100
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b089      	sub	sp, #36	@ 0x24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f1c3 0307 	rsb	r3, r3, #7
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	bf28      	it	cs
 8001d8a:	2304      	movcs	r3, #4
 8001d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	3304      	adds	r3, #4
 8001d92:	2b06      	cmp	r3, #6
 8001d94:	d902      	bls.n	8001d9c <NVIC_EncodePriority+0x30>
 8001d96:	69fb      	ldr	r3, [r7, #28]
 8001d98:	3b03      	subs	r3, #3
 8001d9a:	e000      	b.n	8001d9e <NVIC_EncodePriority+0x32>
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da0:	f04f 32ff 	mov.w	r2, #4294967295
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43da      	mvns	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	401a      	ands	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db4:	f04f 31ff 	mov.w	r1, #4294967295
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbe:	43d9      	mvns	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc4:	4313      	orrs	r3, r2
         );
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3724      	adds	r7, #36	@ 0x24
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001de4:	d301      	bcc.n	8001dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00f      	b.n	8001e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dea:	4a0a      	ldr	r2, [pc, #40]	@ (8001e14 <SysTick_Config+0x40>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df2:	210f      	movs	r1, #15
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	f7ff ff8e 	bl	8001d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dfc:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <SysTick_Config+0x40>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e02:	4b04      	ldr	r3, [pc, #16]	@ (8001e14 <SysTick_Config+0x40>)
 8001e04:	2207      	movs	r2, #7
 8001e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	e000e010 	.word	0xe000e010

08001e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ff47 	bl	8001cb4 <__NVIC_SetPriorityGrouping>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b086      	sub	sp, #24
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e40:	f7ff ff5c 	bl	8001cfc <__NVIC_GetPriorityGrouping>
 8001e44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	6978      	ldr	r0, [r7, #20]
 8001e4c:	f7ff ff8e 	bl	8001d6c <NVIC_EncodePriority>
 8001e50:	4602      	mov	r2, r0
 8001e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff5d 	bl	8001d18 <__NVIC_SetPriority>
}
 8001e5e:	bf00      	nop
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e6e:	6878      	ldr	r0, [r7, #4]
 8001e70:	f7ff ffb0 	bl	8001dd4 <SysTick_Config>
 8001e74:	4603      	mov	r3, r0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
	...

08001e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	@ 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e96:	2300      	movs	r3, #0
 8001e98:	61fb      	str	r3, [r7, #28]
 8001e9a:	e159      	b.n	8002150 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	4013      	ands	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	f040 8148 	bne.w	800214a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f003 0303 	and.w	r3, r3, #3
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d005      	beq.n	8001ed2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d130      	bne.n	8001f34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	005b      	lsls	r3, r3, #1
 8001edc:	2203      	movs	r2, #3
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	68da      	ldr	r2, [r3, #12]
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	005b      	lsls	r3, r3, #1
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f08:	2201      	movs	r2, #1
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f10:	43db      	mvns	r3, r3
 8001f12:	69ba      	ldr	r2, [r7, #24]
 8001f14:	4013      	ands	r3, r2
 8001f16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	f003 0201 	and.w	r2, r3, #1
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	fa02 f303 	lsl.w	r3, r2, r3
 8001f28:	69ba      	ldr	r2, [r7, #24]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 0303 	and.w	r3, r3, #3
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d017      	beq.n	8001f70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	2203      	movs	r2, #3
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	69ba      	ldr	r2, [r7, #24]
 8001f54:	4013      	ands	r3, r2
 8001f56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689a      	ldr	r2, [r3, #8]
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f003 0303 	and.w	r3, r3, #3
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d123      	bne.n	8001fc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	08da      	lsrs	r2, r3, #3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3208      	adds	r2, #8
 8001f84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f003 0307 	and.w	r3, r3, #7
 8001f90:	009b      	lsls	r3, r3, #2
 8001f92:	220f      	movs	r2, #15
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	691a      	ldr	r2, [r3, #16]
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	08da      	lsrs	r2, r3, #3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	3208      	adds	r2, #8
 8001fbe:	69b9      	ldr	r1, [r7, #24]
 8001fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	005b      	lsls	r3, r3, #1
 8001fce:	2203      	movs	r2, #3
 8001fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4013      	ands	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 0203 	and.w	r2, r3, #3
 8001fe4:	69fb      	ldr	r3, [r7, #28]
 8001fe6:	005b      	lsls	r3, r3, #1
 8001fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fec:	69ba      	ldr	r2, [r7, #24]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 80a2 	beq.w	800214a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	4b57      	ldr	r3, [pc, #348]	@ (8002168 <HAL_GPIO_Init+0x2e8>)
 800200c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200e:	4a56      	ldr	r2, [pc, #344]	@ (8002168 <HAL_GPIO_Init+0x2e8>)
 8002010:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002014:	6453      	str	r3, [r2, #68]	@ 0x44
 8002016:	4b54      	ldr	r3, [pc, #336]	@ (8002168 <HAL_GPIO_Init+0x2e8>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800201e:	60fb      	str	r3, [r7, #12]
 8002020:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002022:	4a52      	ldr	r2, [pc, #328]	@ (800216c <HAL_GPIO_Init+0x2ec>)
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	3302      	adds	r3, #2
 800202a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	220f      	movs	r2, #15
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a49      	ldr	r2, [pc, #292]	@ (8002170 <HAL_GPIO_Init+0x2f0>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d019      	beq.n	8002082 <HAL_GPIO_Init+0x202>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a48      	ldr	r2, [pc, #288]	@ (8002174 <HAL_GPIO_Init+0x2f4>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d013      	beq.n	800207e <HAL_GPIO_Init+0x1fe>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a47      	ldr	r2, [pc, #284]	@ (8002178 <HAL_GPIO_Init+0x2f8>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d00d      	beq.n	800207a <HAL_GPIO_Init+0x1fa>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a46      	ldr	r2, [pc, #280]	@ (800217c <HAL_GPIO_Init+0x2fc>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d007      	beq.n	8002076 <HAL_GPIO_Init+0x1f6>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a45      	ldr	r2, [pc, #276]	@ (8002180 <HAL_GPIO_Init+0x300>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d101      	bne.n	8002072 <HAL_GPIO_Init+0x1f2>
 800206e:	2304      	movs	r3, #4
 8002070:	e008      	b.n	8002084 <HAL_GPIO_Init+0x204>
 8002072:	2307      	movs	r3, #7
 8002074:	e006      	b.n	8002084 <HAL_GPIO_Init+0x204>
 8002076:	2303      	movs	r3, #3
 8002078:	e004      	b.n	8002084 <HAL_GPIO_Init+0x204>
 800207a:	2302      	movs	r3, #2
 800207c:	e002      	b.n	8002084 <HAL_GPIO_Init+0x204>
 800207e:	2301      	movs	r3, #1
 8002080:	e000      	b.n	8002084 <HAL_GPIO_Init+0x204>
 8002082:	2300      	movs	r3, #0
 8002084:	69fa      	ldr	r2, [r7, #28]
 8002086:	f002 0203 	and.w	r2, r2, #3
 800208a:	0092      	lsls	r2, r2, #2
 800208c:	4093      	lsls	r3, r2
 800208e:	69ba      	ldr	r2, [r7, #24]
 8002090:	4313      	orrs	r3, r2
 8002092:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002094:	4935      	ldr	r1, [pc, #212]	@ (800216c <HAL_GPIO_Init+0x2ec>)
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	089b      	lsrs	r3, r3, #2
 800209a:	3302      	adds	r3, #2
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020a2:	4b38      	ldr	r3, [pc, #224]	@ (8002184 <HAL_GPIO_Init+0x304>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a8:	693b      	ldr	r3, [r7, #16]
 80020aa:	43db      	mvns	r3, r3
 80020ac:	69ba      	ldr	r2, [r7, #24]
 80020ae:	4013      	ands	r3, r2
 80020b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d003      	beq.n	80020c6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	693b      	ldr	r3, [r7, #16]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80020c6:	4a2f      	ldr	r2, [pc, #188]	@ (8002184 <HAL_GPIO_Init+0x304>)
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80020cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002184 <HAL_GPIO_Init+0x304>)
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	69ba      	ldr	r2, [r7, #24]
 80020d8:	4013      	ands	r3, r2
 80020da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020f0:	4a24      	ldr	r2, [pc, #144]	@ (8002184 <HAL_GPIO_Init+0x304>)
 80020f2:	69bb      	ldr	r3, [r7, #24]
 80020f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020f6:	4b23      	ldr	r3, [pc, #140]	@ (8002184 <HAL_GPIO_Init+0x304>)
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	43db      	mvns	r3, r3
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	4013      	ands	r3, r2
 8002104:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002112:	69ba      	ldr	r2, [r7, #24]
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	4313      	orrs	r3, r2
 8002118:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800211a:	4a1a      	ldr	r2, [pc, #104]	@ (8002184 <HAL_GPIO_Init+0x304>)
 800211c:	69bb      	ldr	r3, [r7, #24]
 800211e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002120:	4b18      	ldr	r3, [pc, #96]	@ (8002184 <HAL_GPIO_Init+0x304>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002144:	4a0f      	ldr	r2, [pc, #60]	@ (8002184 <HAL_GPIO_Init+0x304>)
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	3301      	adds	r3, #1
 800214e:	61fb      	str	r3, [r7, #28]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	2b0f      	cmp	r3, #15
 8002154:	f67f aea2 	bls.w	8001e9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3724      	adds	r7, #36	@ 0x24
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40023800 	.word	0x40023800
 800216c:	40013800 	.word	0x40013800
 8002170:	40020000 	.word	0x40020000
 8002174:	40020400 	.word	0x40020400
 8002178:	40020800 	.word	0x40020800
 800217c:	40020c00 	.word	0x40020c00
 8002180:	40021000 	.word	0x40021000
 8002184:	40013c00 	.word	0x40013c00

08002188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
 8002194:	4613      	mov	r3, r2
 8002196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002198:	787b      	ldrb	r3, [r7, #1]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021a4:	e003      	b.n	80021ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021a6:	887b      	ldrh	r3, [r7, #2]
 80021a8:	041a      	lsls	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	619a      	str	r2, [r3, #24]
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e267      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d075      	beq.n	80022c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021da:	4b88      	ldr	r3, [pc, #544]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d00c      	beq.n	8002200 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021e6:	4b85      	ldr	r3, [pc, #532]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d112      	bne.n	8002218 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021f2:	4b82      	ldr	r3, [pc, #520]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80021fe:	d10b      	bne.n	8002218 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002200:	4b7e      	ldr	r3, [pc, #504]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d05b      	beq.n	80022c4 <HAL_RCC_OscConfig+0x108>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d157      	bne.n	80022c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e242      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002220:	d106      	bne.n	8002230 <HAL_RCC_OscConfig+0x74>
 8002222:	4b76      	ldr	r3, [pc, #472]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a75      	ldr	r2, [pc, #468]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 8002228:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e01d      	b.n	800226c <HAL_RCC_OscConfig+0xb0>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002238:	d10c      	bne.n	8002254 <HAL_RCC_OscConfig+0x98>
 800223a:	4b70      	ldr	r3, [pc, #448]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a6f      	ldr	r2, [pc, #444]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 8002240:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002244:	6013      	str	r3, [r2, #0]
 8002246:	4b6d      	ldr	r3, [pc, #436]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a6c      	ldr	r2, [pc, #432]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 800224c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e00b      	b.n	800226c <HAL_RCC_OscConfig+0xb0>
 8002254:	4b69      	ldr	r3, [pc, #420]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a68      	ldr	r2, [pc, #416]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 800225a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	4b66      	ldr	r3, [pc, #408]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a65      	ldr	r2, [pc, #404]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 8002266:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800226a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d013      	beq.n	800229c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7ff f9ee 	bl	8001654 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800227c:	f7ff f9ea 	bl	8001654 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b64      	cmp	r3, #100	@ 0x64
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e207      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	4b5b      	ldr	r3, [pc, #364]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0f0      	beq.n	800227c <HAL_RCC_OscConfig+0xc0>
 800229a:	e014      	b.n	80022c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800229c:	f7ff f9da 	bl	8001654 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a4:	f7ff f9d6 	bl	8001654 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	@ 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e1f3      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022b6:	4b51      	ldr	r3, [pc, #324]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d1f0      	bne.n	80022a4 <HAL_RCC_OscConfig+0xe8>
 80022c2:	e000      	b.n	80022c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d063      	beq.n	800239a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022d2:	4b4a      	ldr	r3, [pc, #296]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 030c 	and.w	r3, r3, #12
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d00b      	beq.n	80022f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022de:	4b47      	ldr	r3, [pc, #284]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80022e6:	2b08      	cmp	r3, #8
 80022e8:	d11c      	bne.n	8002324 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ea:	4b44      	ldr	r3, [pc, #272]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d116      	bne.n	8002324 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f6:	4b41      	ldr	r3, [pc, #260]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d005      	beq.n	800230e <HAL_RCC_OscConfig+0x152>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d001      	beq.n	800230e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e1c7      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230e:	4b3b      	ldr	r3, [pc, #236]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	00db      	lsls	r3, r3, #3
 800231c:	4937      	ldr	r1, [pc, #220]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 800231e:	4313      	orrs	r3, r2
 8002320:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002322:	e03a      	b.n	800239a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d020      	beq.n	800236e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800232c:	4b34      	ldr	r3, [pc, #208]	@ (8002400 <HAL_RCC_OscConfig+0x244>)
 800232e:	2201      	movs	r2, #1
 8002330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002332:	f7ff f98f 	bl	8001654 <HAL_GetTick>
 8002336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002338:	e008      	b.n	800234c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800233a:	f7ff f98b 	bl	8001654 <HAL_GetTick>
 800233e:	4602      	mov	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	2b02      	cmp	r3, #2
 8002346:	d901      	bls.n	800234c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e1a8      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800234c:	4b2b      	ldr	r3, [pc, #172]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0302 	and.w	r3, r3, #2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002358:	4b28      	ldr	r3, [pc, #160]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	691b      	ldr	r3, [r3, #16]
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4925      	ldr	r1, [pc, #148]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 8002368:	4313      	orrs	r3, r2
 800236a:	600b      	str	r3, [r1, #0]
 800236c:	e015      	b.n	800239a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800236e:	4b24      	ldr	r3, [pc, #144]	@ (8002400 <HAL_RCC_OscConfig+0x244>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002374:	f7ff f96e 	bl	8001654 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800237c:	f7ff f96a 	bl	8001654 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e187      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800238e:	4b1b      	ldr	r3, [pc, #108]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0308 	and.w	r3, r3, #8
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d036      	beq.n	8002414 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	695b      	ldr	r3, [r3, #20]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d016      	beq.n	80023dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ae:	4b15      	ldr	r3, [pc, #84]	@ (8002404 <HAL_RCC_OscConfig+0x248>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b4:	f7ff f94e 	bl	8001654 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023bc:	f7ff f94a 	bl	8001654 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e167      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ce:	4b0b      	ldr	r3, [pc, #44]	@ (80023fc <HAL_RCC_OscConfig+0x240>)
 80023d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d0f0      	beq.n	80023bc <HAL_RCC_OscConfig+0x200>
 80023da:	e01b      	b.n	8002414 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023dc:	4b09      	ldr	r3, [pc, #36]	@ (8002404 <HAL_RCC_OscConfig+0x248>)
 80023de:	2200      	movs	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023e2:	f7ff f937 	bl	8001654 <HAL_GetTick>
 80023e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023e8:	e00e      	b.n	8002408 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023ea:	f7ff f933 	bl	8001654 <HAL_GetTick>
 80023ee:	4602      	mov	r2, r0
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d907      	bls.n	8002408 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023f8:	2303      	movs	r3, #3
 80023fa:	e150      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
 80023fc:	40023800 	.word	0x40023800
 8002400:	42470000 	.word	0x42470000
 8002404:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002408:	4b88      	ldr	r3, [pc, #544]	@ (800262c <HAL_RCC_OscConfig+0x470>)
 800240a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1ea      	bne.n	80023ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0304 	and.w	r3, r3, #4
 800241c:	2b00      	cmp	r3, #0
 800241e:	f000 8097 	beq.w	8002550 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002422:	2300      	movs	r3, #0
 8002424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002426:	4b81      	ldr	r3, [pc, #516]	@ (800262c <HAL_RCC_OscConfig+0x470>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800242a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10f      	bne.n	8002452 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	60bb      	str	r3, [r7, #8]
 8002436:	4b7d      	ldr	r3, [pc, #500]	@ (800262c <HAL_RCC_OscConfig+0x470>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800243a:	4a7c      	ldr	r2, [pc, #496]	@ (800262c <HAL_RCC_OscConfig+0x470>)
 800243c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002440:	6413      	str	r3, [r2, #64]	@ 0x40
 8002442:	4b7a      	ldr	r3, [pc, #488]	@ (800262c <HAL_RCC_OscConfig+0x470>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002446:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800244e:	2301      	movs	r3, #1
 8002450:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002452:	4b77      	ldr	r3, [pc, #476]	@ (8002630 <HAL_RCC_OscConfig+0x474>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800245a:	2b00      	cmp	r3, #0
 800245c:	d118      	bne.n	8002490 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800245e:	4b74      	ldr	r3, [pc, #464]	@ (8002630 <HAL_RCC_OscConfig+0x474>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a73      	ldr	r2, [pc, #460]	@ (8002630 <HAL_RCC_OscConfig+0x474>)
 8002464:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800246a:	f7ff f8f3 	bl	8001654 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002472:	f7ff f8ef 	bl	8001654 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e10c      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002484:	4b6a      	ldr	r3, [pc, #424]	@ (8002630 <HAL_RCC_OscConfig+0x474>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d106      	bne.n	80024a6 <HAL_RCC_OscConfig+0x2ea>
 8002498:	4b64      	ldr	r3, [pc, #400]	@ (800262c <HAL_RCC_OscConfig+0x470>)
 800249a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800249c:	4a63      	ldr	r2, [pc, #396]	@ (800262c <HAL_RCC_OscConfig+0x470>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80024a4:	e01c      	b.n	80024e0 <HAL_RCC_OscConfig+0x324>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b05      	cmp	r3, #5
 80024ac:	d10c      	bne.n	80024c8 <HAL_RCC_OscConfig+0x30c>
 80024ae:	4b5f      	ldr	r3, [pc, #380]	@ (800262c <HAL_RCC_OscConfig+0x470>)
 80024b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b2:	4a5e      	ldr	r2, [pc, #376]	@ (800262c <HAL_RCC_OscConfig+0x470>)
 80024b4:	f043 0304 	orr.w	r3, r3, #4
 80024b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80024ba:	4b5c      	ldr	r3, [pc, #368]	@ (800262c <HAL_RCC_OscConfig+0x470>)
 80024bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024be:	4a5b      	ldr	r2, [pc, #364]	@ (800262c <HAL_RCC_OscConfig+0x470>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80024c6:	e00b      	b.n	80024e0 <HAL_RCC_OscConfig+0x324>
 80024c8:	4b58      	ldr	r3, [pc, #352]	@ (800262c <HAL_RCC_OscConfig+0x470>)
 80024ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024cc:	4a57      	ldr	r2, [pc, #348]	@ (800262c <HAL_RCC_OscConfig+0x470>)
 80024ce:	f023 0301 	bic.w	r3, r3, #1
 80024d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80024d4:	4b55      	ldr	r3, [pc, #340]	@ (800262c <HAL_RCC_OscConfig+0x470>)
 80024d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024d8:	4a54      	ldr	r2, [pc, #336]	@ (800262c <HAL_RCC_OscConfig+0x470>)
 80024da:	f023 0304 	bic.w	r3, r3, #4
 80024de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d015      	beq.n	8002514 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e8:	f7ff f8b4 	bl	8001654 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024ee:	e00a      	b.n	8002506 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f0:	f7ff f8b0 	bl	8001654 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024fe:	4293      	cmp	r3, r2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e0cb      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002506:	4b49      	ldr	r3, [pc, #292]	@ (800262c <HAL_RCC_OscConfig+0x470>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0ee      	beq.n	80024f0 <HAL_RCC_OscConfig+0x334>
 8002512:	e014      	b.n	800253e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002514:	f7ff f89e 	bl	8001654 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800251a:	e00a      	b.n	8002532 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800251c:	f7ff f89a 	bl	8001654 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800252a:	4293      	cmp	r3, r2
 800252c:	d901      	bls.n	8002532 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e0b5      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002532:	4b3e      	ldr	r3, [pc, #248]	@ (800262c <HAL_RCC_OscConfig+0x470>)
 8002534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1ee      	bne.n	800251c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800253e:	7dfb      	ldrb	r3, [r7, #23]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d105      	bne.n	8002550 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002544:	4b39      	ldr	r3, [pc, #228]	@ (800262c <HAL_RCC_OscConfig+0x470>)
 8002546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002548:	4a38      	ldr	r2, [pc, #224]	@ (800262c <HAL_RCC_OscConfig+0x470>)
 800254a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800254e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 80a1 	beq.w	800269c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800255a:	4b34      	ldr	r3, [pc, #208]	@ (800262c <HAL_RCC_OscConfig+0x470>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b08      	cmp	r3, #8
 8002564:	d05c      	beq.n	8002620 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	2b02      	cmp	r3, #2
 800256c:	d141      	bne.n	80025f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256e:	4b31      	ldr	r3, [pc, #196]	@ (8002634 <HAL_RCC_OscConfig+0x478>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7ff f86e 	bl	8001654 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257c:	f7ff f86a 	bl	8001654 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e087      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800258e:	4b27      	ldr	r3, [pc, #156]	@ (800262c <HAL_RCC_OscConfig+0x470>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	69da      	ldr	r2, [r3, #28]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a1b      	ldr	r3, [r3, #32]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025a8:	019b      	lsls	r3, r3, #6
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b0:	085b      	lsrs	r3, r3, #1
 80025b2:	3b01      	subs	r3, #1
 80025b4:	041b      	lsls	r3, r3, #16
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025bc:	061b      	lsls	r3, r3, #24
 80025be:	491b      	ldr	r1, [pc, #108]	@ (800262c <HAL_RCC_OscConfig+0x470>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002634 <HAL_RCC_OscConfig+0x478>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025ca:	f7ff f843 	bl	8001654 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025d0:	e008      	b.n	80025e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d2:	f7ff f83f 	bl	8001654 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e05c      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e4:	4b11      	ldr	r3, [pc, #68]	@ (800262c <HAL_RCC_OscConfig+0x470>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0f0      	beq.n	80025d2 <HAL_RCC_OscConfig+0x416>
 80025f0:	e054      	b.n	800269c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025f2:	4b10      	ldr	r3, [pc, #64]	@ (8002634 <HAL_RCC_OscConfig+0x478>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f8:	f7ff f82c 	bl	8001654 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002600:	f7ff f828 	bl	8001654 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e045      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002612:	4b06      	ldr	r3, [pc, #24]	@ (800262c <HAL_RCC_OscConfig+0x470>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1f0      	bne.n	8002600 <HAL_RCC_OscConfig+0x444>
 800261e:	e03d      	b.n	800269c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	699b      	ldr	r3, [r3, #24]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d107      	bne.n	8002638 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e038      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
 800262c:	40023800 	.word	0x40023800
 8002630:	40007000 	.word	0x40007000
 8002634:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002638:	4b1b      	ldr	r3, [pc, #108]	@ (80026a8 <HAL_RCC_OscConfig+0x4ec>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	699b      	ldr	r3, [r3, #24]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d028      	beq.n	8002698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002650:	429a      	cmp	r2, r3
 8002652:	d121      	bne.n	8002698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265e:	429a      	cmp	r2, r3
 8002660:	d11a      	bne.n	8002698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002668:	4013      	ands	r3, r2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800266e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002670:	4293      	cmp	r3, r2
 8002672:	d111      	bne.n	8002698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800267e:	085b      	lsrs	r3, r3, #1
 8002680:	3b01      	subs	r3, #1
 8002682:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002684:	429a      	cmp	r2, r3
 8002686:	d107      	bne.n	8002698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002692:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002694:	429a      	cmp	r2, r3
 8002696:	d001      	beq.n	800269c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e000      	b.n	800269e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3718      	adds	r7, #24
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800

080026ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e0cc      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026c0:	4b68      	ldr	r3, [pc, #416]	@ (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0307 	and.w	r3, r3, #7
 80026c8:	683a      	ldr	r2, [r7, #0]
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d90c      	bls.n	80026e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ce:	4b65      	ldr	r3, [pc, #404]	@ (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d6:	4b63      	ldr	r3, [pc, #396]	@ (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e0b8      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0302 	and.w	r3, r3, #2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d020      	beq.n	8002736 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d005      	beq.n	800270c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002700:	4b59      	ldr	r3, [pc, #356]	@ (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	4a58      	ldr	r2, [pc, #352]	@ (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002706:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800270a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0308 	and.w	r3, r3, #8
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002718:	4b53      	ldr	r3, [pc, #332]	@ (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800271a:	689b      	ldr	r3, [r3, #8]
 800271c:	4a52      	ldr	r2, [pc, #328]	@ (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800271e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002722:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002724:	4b50      	ldr	r3, [pc, #320]	@ (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	494d      	ldr	r1, [pc, #308]	@ (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002732:	4313      	orrs	r3, r2
 8002734:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0301 	and.w	r3, r3, #1
 800273e:	2b00      	cmp	r3, #0
 8002740:	d044      	beq.n	80027cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d107      	bne.n	800275a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	4b47      	ldr	r3, [pc, #284]	@ (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d119      	bne.n	800278a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e07f      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	2b02      	cmp	r3, #2
 8002760:	d003      	beq.n	800276a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002766:	2b03      	cmp	r3, #3
 8002768:	d107      	bne.n	800277a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800276a:	4b3f      	ldr	r3, [pc, #252]	@ (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d109      	bne.n	800278a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e06f      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277a:	4b3b      	ldr	r3, [pc, #236]	@ (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e067      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800278a:	4b37      	ldr	r3, [pc, #220]	@ (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f023 0203 	bic.w	r2, r3, #3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	4934      	ldr	r1, [pc, #208]	@ (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002798:	4313      	orrs	r3, r2
 800279a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800279c:	f7fe ff5a 	bl	8001654 <HAL_GetTick>
 80027a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a2:	e00a      	b.n	80027ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027a4:	f7fe ff56 	bl	8001654 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e04f      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ba:	4b2b      	ldr	r3, [pc, #172]	@ (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	f003 020c 	and.w	r2, r3, #12
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d1eb      	bne.n	80027a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027cc:	4b25      	ldr	r3, [pc, #148]	@ (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 0307 	and.w	r3, r3, #7
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d20c      	bcs.n	80027f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027da:	4b22      	ldr	r3, [pc, #136]	@ (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027e2:	4b20      	ldr	r3, [pc, #128]	@ (8002864 <HAL_RCC_ClockConfig+0x1b8>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0307 	and.w	r3, r3, #7
 80027ea:	683a      	ldr	r2, [r7, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d001      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e032      	b.n	800285a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d008      	beq.n	8002812 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002800:	4b19      	ldr	r3, [pc, #100]	@ (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4916      	ldr	r1, [pc, #88]	@ (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	4313      	orrs	r3, r2
 8002810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d009      	beq.n	8002832 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800281e:	4b12      	ldr	r3, [pc, #72]	@ (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	490e      	ldr	r1, [pc, #56]	@ (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	4313      	orrs	r3, r2
 8002830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002832:	f000 f821 	bl	8002878 <HAL_RCC_GetSysClockFreq>
 8002836:	4602      	mov	r2, r0
 8002838:	4b0b      	ldr	r3, [pc, #44]	@ (8002868 <HAL_RCC_ClockConfig+0x1bc>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	091b      	lsrs	r3, r3, #4
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	490a      	ldr	r1, [pc, #40]	@ (800286c <HAL_RCC_ClockConfig+0x1c0>)
 8002844:	5ccb      	ldrb	r3, [r1, r3]
 8002846:	fa22 f303 	lsr.w	r3, r2, r3
 800284a:	4a09      	ldr	r2, [pc, #36]	@ (8002870 <HAL_RCC_ClockConfig+0x1c4>)
 800284c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800284e:	4b09      	ldr	r3, [pc, #36]	@ (8002874 <HAL_RCC_ClockConfig+0x1c8>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7fe feba 	bl	80015cc <HAL_InitTick>

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40023c00 	.word	0x40023c00
 8002868:	40023800 	.word	0x40023800
 800286c:	080042bc 	.word	0x080042bc
 8002870:	20000000 	.word	0x20000000
 8002874:	20000004 	.word	0x20000004

08002878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800287c:	b094      	sub	sp, #80	@ 0x50
 800287e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002880:	2300      	movs	r3, #0
 8002882:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002888:	2300      	movs	r3, #0
 800288a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002890:	4b79      	ldr	r3, [pc, #484]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 030c 	and.w	r3, r3, #12
 8002898:	2b08      	cmp	r3, #8
 800289a:	d00d      	beq.n	80028b8 <HAL_RCC_GetSysClockFreq+0x40>
 800289c:	2b08      	cmp	r3, #8
 800289e:	f200 80e1 	bhi.w	8002a64 <HAL_RCC_GetSysClockFreq+0x1ec>
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d002      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x34>
 80028a6:	2b04      	cmp	r3, #4
 80028a8:	d003      	beq.n	80028b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80028aa:	e0db      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028ac:	4b73      	ldr	r3, [pc, #460]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x204>)
 80028ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028b0:	e0db      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028b2:	4b73      	ldr	r3, [pc, #460]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0x208>)
 80028b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80028b6:	e0d8      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028b8:	4b6f      	ldr	r3, [pc, #444]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028c2:	4b6d      	ldr	r3, [pc, #436]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d063      	beq.n	8002996 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028ce:	4b6a      	ldr	r3, [pc, #424]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x200>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	099b      	lsrs	r3, r3, #6
 80028d4:	2200      	movs	r2, #0
 80028d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80028d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80028da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80028e2:	2300      	movs	r3, #0
 80028e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80028e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80028ea:	4622      	mov	r2, r4
 80028ec:	462b      	mov	r3, r5
 80028ee:	f04f 0000 	mov.w	r0, #0
 80028f2:	f04f 0100 	mov.w	r1, #0
 80028f6:	0159      	lsls	r1, r3, #5
 80028f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028fc:	0150      	lsls	r0, r2, #5
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4621      	mov	r1, r4
 8002904:	1a51      	subs	r1, r2, r1
 8002906:	6139      	str	r1, [r7, #16]
 8002908:	4629      	mov	r1, r5
 800290a:	eb63 0301 	sbc.w	r3, r3, r1
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	f04f 0200 	mov.w	r2, #0
 8002914:	f04f 0300 	mov.w	r3, #0
 8002918:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800291c:	4659      	mov	r1, fp
 800291e:	018b      	lsls	r3, r1, #6
 8002920:	4651      	mov	r1, sl
 8002922:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002926:	4651      	mov	r1, sl
 8002928:	018a      	lsls	r2, r1, #6
 800292a:	4651      	mov	r1, sl
 800292c:	ebb2 0801 	subs.w	r8, r2, r1
 8002930:	4659      	mov	r1, fp
 8002932:	eb63 0901 	sbc.w	r9, r3, r1
 8002936:	f04f 0200 	mov.w	r2, #0
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002942:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002946:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800294a:	4690      	mov	r8, r2
 800294c:	4699      	mov	r9, r3
 800294e:	4623      	mov	r3, r4
 8002950:	eb18 0303 	adds.w	r3, r8, r3
 8002954:	60bb      	str	r3, [r7, #8]
 8002956:	462b      	mov	r3, r5
 8002958:	eb49 0303 	adc.w	r3, r9, r3
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	f04f 0200 	mov.w	r2, #0
 8002962:	f04f 0300 	mov.w	r3, #0
 8002966:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800296a:	4629      	mov	r1, r5
 800296c:	024b      	lsls	r3, r1, #9
 800296e:	4621      	mov	r1, r4
 8002970:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002974:	4621      	mov	r1, r4
 8002976:	024a      	lsls	r2, r1, #9
 8002978:	4610      	mov	r0, r2
 800297a:	4619      	mov	r1, r3
 800297c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800297e:	2200      	movs	r2, #0
 8002980:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002982:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002984:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002988:	f7fe f8a0 	bl	8000acc <__aeabi_uldivmod>
 800298c:	4602      	mov	r2, r0
 800298e:	460b      	mov	r3, r1
 8002990:	4613      	mov	r3, r2
 8002992:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002994:	e058      	b.n	8002a48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002996:	4b38      	ldr	r3, [pc, #224]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	099b      	lsrs	r3, r3, #6
 800299c:	2200      	movs	r2, #0
 800299e:	4618      	mov	r0, r3
 80029a0:	4611      	mov	r1, r2
 80029a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80029a6:	623b      	str	r3, [r7, #32]
 80029a8:	2300      	movs	r3, #0
 80029aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80029ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80029b0:	4642      	mov	r2, r8
 80029b2:	464b      	mov	r3, r9
 80029b4:	f04f 0000 	mov.w	r0, #0
 80029b8:	f04f 0100 	mov.w	r1, #0
 80029bc:	0159      	lsls	r1, r3, #5
 80029be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80029c2:	0150      	lsls	r0, r2, #5
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4641      	mov	r1, r8
 80029ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80029ce:	4649      	mov	r1, r9
 80029d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	f04f 0300 	mov.w	r3, #0
 80029dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80029e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80029e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80029e8:	ebb2 040a 	subs.w	r4, r2, sl
 80029ec:	eb63 050b 	sbc.w	r5, r3, fp
 80029f0:	f04f 0200 	mov.w	r2, #0
 80029f4:	f04f 0300 	mov.w	r3, #0
 80029f8:	00eb      	lsls	r3, r5, #3
 80029fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029fe:	00e2      	lsls	r2, r4, #3
 8002a00:	4614      	mov	r4, r2
 8002a02:	461d      	mov	r5, r3
 8002a04:	4643      	mov	r3, r8
 8002a06:	18e3      	adds	r3, r4, r3
 8002a08:	603b      	str	r3, [r7, #0]
 8002a0a:	464b      	mov	r3, r9
 8002a0c:	eb45 0303 	adc.w	r3, r5, r3
 8002a10:	607b      	str	r3, [r7, #4]
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	f04f 0300 	mov.w	r3, #0
 8002a1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a1e:	4629      	mov	r1, r5
 8002a20:	028b      	lsls	r3, r1, #10
 8002a22:	4621      	mov	r1, r4
 8002a24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a28:	4621      	mov	r1, r4
 8002a2a:	028a      	lsls	r2, r1, #10
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	4619      	mov	r1, r3
 8002a30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a32:	2200      	movs	r2, #0
 8002a34:	61bb      	str	r3, [r7, #24]
 8002a36:	61fa      	str	r2, [r7, #28]
 8002a38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a3c:	f7fe f846 	bl	8000acc <__aeabi_uldivmod>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4613      	mov	r3, r2
 8002a46:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002a48:	4b0b      	ldr	r3, [pc, #44]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	0c1b      	lsrs	r3, r3, #16
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	3301      	adds	r3, #1
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002a58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002a5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a62:	e002      	b.n	8002a6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a64:	4b05      	ldr	r3, [pc, #20]	@ (8002a7c <HAL_RCC_GetSysClockFreq+0x204>)
 8002a66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3750      	adds	r7, #80	@ 0x50
 8002a70:	46bd      	mov	sp, r7
 8002a72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a76:	bf00      	nop
 8002a78:	40023800 	.word	0x40023800
 8002a7c:	00f42400 	.word	0x00f42400
 8002a80:	007a1200 	.word	0x007a1200

08002a84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a88:	4b03      	ldr	r3, [pc, #12]	@ (8002a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	20000000 	.word	0x20000000

08002a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002aa0:	f7ff fff0 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	4b05      	ldr	r3, [pc, #20]	@ (8002abc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	0a9b      	lsrs	r3, r3, #10
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	4903      	ldr	r1, [pc, #12]	@ (8002ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ab2:	5ccb      	ldrb	r3, [r1, r3]
 8002ab4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	bd80      	pop	{r7, pc}
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	080042cc 	.word	0x080042cc

08002ac4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ac8:	f7ff ffdc 	bl	8002a84 <HAL_RCC_GetHCLKFreq>
 8002acc:	4602      	mov	r2, r0
 8002ace:	4b05      	ldr	r3, [pc, #20]	@ (8002ae4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	0b5b      	lsrs	r3, r3, #13
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	4903      	ldr	r1, [pc, #12]	@ (8002ae8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ada:	5ccb      	ldrb	r3, [r1, r3]
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	080042cc 	.word	0x080042cc

08002aec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e07b      	b.n	8002bf6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d108      	bne.n	8002b18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b0e:	d009      	beq.n	8002b24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	61da      	str	r2, [r3, #28]
 8002b16:	e005      	b.n	8002b24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2200      	movs	r2, #0
 8002b22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f7fe fbd0 	bl	80012e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	431a      	orrs	r2, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	695b      	ldr	r3, [r3, #20]
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b94:	431a      	orrs	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002b9e:	431a      	orrs	r2, r3
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ba8:	ea42 0103 	orr.w	r1, r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	0c1b      	lsrs	r3, r3, #16
 8002bc2:	f003 0104 	and.w	r1, r3, #4
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bca:	f003 0210 	and.w	r2, r3, #16
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	69da      	ldr	r2, [r3, #28]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002be4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3708      	adds	r7, #8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}

08002bfe <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002bfe:	b580      	push	{r7, lr}
 8002c00:	b08a      	sub	sp, #40	@ 0x28
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
 8002c0a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c10:	f7fe fd20 	bl	8001654 <HAL_GetTick>
 8002c14:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c1c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002c24:	887b      	ldrh	r3, [r7, #2]
 8002c26:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002c28:	7ffb      	ldrb	r3, [r7, #31]
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d00c      	beq.n	8002c48 <HAL_SPI_TransmitReceive+0x4a>
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c34:	d106      	bne.n	8002c44 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d102      	bne.n	8002c44 <HAL_SPI_TransmitReceive+0x46>
 8002c3e:	7ffb      	ldrb	r3, [r7, #31]
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d001      	beq.n	8002c48 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8002c44:	2302      	movs	r3, #2
 8002c46:	e17f      	b.n	8002f48 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d005      	beq.n	8002c5a <HAL_SPI_TransmitReceive+0x5c>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d002      	beq.n	8002c5a <HAL_SPI_TransmitReceive+0x5c>
 8002c54:	887b      	ldrh	r3, [r7, #2]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e174      	b.n	8002f48 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_SPI_TransmitReceive+0x6e>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e16d      	b.n	8002f48 <HAL_SPI_TransmitReceive+0x34a>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b04      	cmp	r3, #4
 8002c7e:	d003      	beq.n	8002c88 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2205      	movs	r2, #5
 8002c84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	887a      	ldrh	r2, [r7, #2]
 8002c98:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	887a      	ldrh	r2, [r7, #2]
 8002c9e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	887a      	ldrh	r2, [r7, #2]
 8002caa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	887a      	ldrh	r2, [r7, #2]
 8002cb0:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cc8:	2b40      	cmp	r3, #64	@ 0x40
 8002cca:	d007      	beq.n	8002cdc <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002cda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ce4:	d17e      	bne.n	8002de4 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d002      	beq.n	8002cf4 <HAL_SPI_TransmitReceive+0xf6>
 8002cee:	8afb      	ldrh	r3, [r7, #22]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d16c      	bne.n	8002dce <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf8:	881a      	ldrh	r2, [r3, #0]
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d04:	1c9a      	adds	r2, r3, #2
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	3b01      	subs	r3, #1
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d18:	e059      	b.n	8002dce <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 0302 	and.w	r3, r3, #2
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d11b      	bne.n	8002d60 <HAL_SPI_TransmitReceive+0x162>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d016      	beq.n	8002d60 <HAL_SPI_TransmitReceive+0x162>
 8002d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d34:	2b01      	cmp	r3, #1
 8002d36:	d113      	bne.n	8002d60 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3c:	881a      	ldrh	r2, [r3, #0]
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d48:	1c9a      	adds	r2, r3, #2
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002d52:	b29b      	uxth	r3, r3
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b29a      	uxth	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d119      	bne.n	8002da2 <HAL_SPI_TransmitReceive+0x1a4>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d014      	beq.n	8002da2 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68da      	ldr	r2, [r3, #12]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d82:	b292      	uxth	r2, r2
 8002d84:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d8a:	1c9a      	adds	r2, r3, #2
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	3b01      	subs	r3, #1
 8002d98:	b29a      	uxth	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002da2:	f7fe fc57 	bl	8001654 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	6a3b      	ldr	r3, [r7, #32]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d80d      	bhi.n	8002dce <HAL_SPI_TransmitReceive+0x1d0>
 8002db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db8:	d009      	beq.n	8002dce <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e0bc      	b.n	8002f48 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002dd2:	b29b      	uxth	r3, r3
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d1a0      	bne.n	8002d1a <HAL_SPI_TransmitReceive+0x11c>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d19b      	bne.n	8002d1a <HAL_SPI_TransmitReceive+0x11c>
 8002de2:	e082      	b.n	8002eea <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d002      	beq.n	8002df2 <HAL_SPI_TransmitReceive+0x1f4>
 8002dec:	8afb      	ldrh	r3, [r7, #22]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d171      	bne.n	8002ed6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	330c      	adds	r3, #12
 8002dfc:	7812      	ldrb	r2, [r2, #0]
 8002dfe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e04:	1c5a      	adds	r2, r3, #1
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	3b01      	subs	r3, #1
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002e18:	e05d      	b.n	8002ed6 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b02      	cmp	r3, #2
 8002e26:	d11c      	bne.n	8002e62 <HAL_SPI_TransmitReceive+0x264>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d017      	beq.n	8002e62 <HAL_SPI_TransmitReceive+0x264>
 8002e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d114      	bne.n	8002e62 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	330c      	adds	r3, #12
 8002e42:	7812      	ldrb	r2, [r2, #0]
 8002e44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4a:	1c5a      	adds	r2, r3, #1
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	3b01      	subs	r3, #1
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d119      	bne.n	8002ea4 <HAL_SPI_TransmitReceive+0x2a6>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d014      	beq.n	8002ea4 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68da      	ldr	r2, [r3, #12]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ea4:	f7fe fbd6 	bl	8001654 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	6a3b      	ldr	r3, [r7, #32]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d803      	bhi.n	8002ebc <HAL_SPI_TransmitReceive+0x2be>
 8002eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eba:	d102      	bne.n	8002ec2 <HAL_SPI_TransmitReceive+0x2c4>
 8002ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d109      	bne.n	8002ed6 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e038      	b.n	8002f48 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d19c      	bne.n	8002e1a <HAL_SPI_TransmitReceive+0x21c>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d197      	bne.n	8002e1a <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002eea:	6a3a      	ldr	r2, [r7, #32]
 8002eec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f000 f8b6 	bl	8003060 <SPI_EndRxTxTransaction>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d008      	beq.n	8002f0c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2220      	movs	r2, #32
 8002efe:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e01d      	b.n	8002f48 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10a      	bne.n	8002f2a <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f14:	2300      	movs	r3, #0
 8002f16:	613b      	str	r3, [r7, #16]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	613b      	str	r3, [r7, #16]
 8002f28:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e000      	b.n	8002f48 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002f46:	2300      	movs	r3, #0
  }
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3728      	adds	r7, #40	@ 0x28
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	603b      	str	r3, [r7, #0]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f60:	f7fe fb78 	bl	8001654 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	683a      	ldr	r2, [r7, #0]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f70:	f7fe fb70 	bl	8001654 <HAL_GetTick>
 8002f74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f76:	4b39      	ldr	r3, [pc, #228]	@ (800305c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	015b      	lsls	r3, r3, #5
 8002f7c:	0d1b      	lsrs	r3, r3, #20
 8002f7e:	69fa      	ldr	r2, [r7, #28]
 8002f80:	fb02 f303 	mul.w	r3, r2, r3
 8002f84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f86:	e054      	b.n	8003032 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8e:	d050      	beq.n	8003032 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f90:	f7fe fb60 	bl	8001654 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	69fa      	ldr	r2, [r7, #28]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d902      	bls.n	8002fa6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d13d      	bne.n	8003022 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002fb4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002fbe:	d111      	bne.n	8002fe4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fc8:	d004      	beq.n	8002fd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002fd2:	d107      	bne.n	8002fe4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fe2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fe8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002fec:	d10f      	bne.n	800300e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800300c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e017      	b.n	8003052 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	3b01      	subs	r3, #1
 8003030:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	4013      	ands	r3, r2
 800303c:	68ba      	ldr	r2, [r7, #8]
 800303e:	429a      	cmp	r2, r3
 8003040:	bf0c      	ite	eq
 8003042:	2301      	moveq	r3, #1
 8003044:	2300      	movne	r3, #0
 8003046:	b2db      	uxtb	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	79fb      	ldrb	r3, [r7, #7]
 800304c:	429a      	cmp	r2, r3
 800304e:	d19b      	bne.n	8002f88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3720      	adds	r7, #32
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20000000 	.word	0x20000000

08003060 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b088      	sub	sp, #32
 8003064:	af02      	add	r7, sp, #8
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	9300      	str	r3, [sp, #0]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2201      	movs	r2, #1
 8003074:	2102      	movs	r1, #2
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f7ff ff6a 	bl	8002f50 <SPI_WaitFlagStateUntilTimeout>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d007      	beq.n	8003092 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003086:	f043 0220 	orr.w	r2, r3, #32
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e032      	b.n	80030f8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003092:	4b1b      	ldr	r3, [pc, #108]	@ (8003100 <SPI_EndRxTxTransaction+0xa0>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a1b      	ldr	r2, [pc, #108]	@ (8003104 <SPI_EndRxTxTransaction+0xa4>)
 8003098:	fba2 2303 	umull	r2, r3, r2, r3
 800309c:	0d5b      	lsrs	r3, r3, #21
 800309e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80030a2:	fb02 f303 	mul.w	r3, r2, r3
 80030a6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030b0:	d112      	bne.n	80030d8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	2200      	movs	r2, #0
 80030ba:	2180      	movs	r1, #128	@ 0x80
 80030bc:	68f8      	ldr	r0, [r7, #12]
 80030be:	f7ff ff47 	bl	8002f50 <SPI_WaitFlagStateUntilTimeout>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d016      	beq.n	80030f6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030cc:	f043 0220 	orr.w	r2, r3, #32
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e00f      	b.n	80030f8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	3b01      	subs	r3, #1
 80030e2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030ee:	2b80      	cmp	r3, #128	@ 0x80
 80030f0:	d0f2      	beq.n	80030d8 <SPI_EndRxTxTransaction+0x78>
 80030f2:	e000      	b.n	80030f6 <SPI_EndRxTxTransaction+0x96>
        break;
 80030f4:	bf00      	nop
  }

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3718      	adds	r7, #24
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	20000000 	.word	0x20000000
 8003104:	165e9f81 	.word	0x165e9f81

08003108 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e042      	b.n	80031a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fe f940 	bl	80013b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2224      	movs	r2, #36	@ 0x24
 8003138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800314a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	f000 f973 	bl	8003438 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	691a      	ldr	r2, [r3, #16]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003160:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	695a      	ldr	r2, [r3, #20]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003170:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003180:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2220      	movs	r2, #32
 800318c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2220      	movs	r2, #32
 8003194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800319e:	2300      	movs	r3, #0
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}

080031a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08a      	sub	sp, #40	@ 0x28
 80031ac:	af02      	add	r7, sp, #8
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	603b      	str	r3, [r7, #0]
 80031b4:	4613      	mov	r3, r2
 80031b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b20      	cmp	r3, #32
 80031c6:	d175      	bne.n	80032b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <HAL_UART_Transmit+0x2c>
 80031ce:	88fb      	ldrh	r3, [r7, #6]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e06e      	b.n	80032b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	2200      	movs	r2, #0
 80031dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2221      	movs	r2, #33	@ 0x21
 80031e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031e6:	f7fe fa35 	bl	8001654 <HAL_GetTick>
 80031ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	88fa      	ldrh	r2, [r7, #6]
 80031f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	88fa      	ldrh	r2, [r7, #6]
 80031f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003200:	d108      	bne.n	8003214 <HAL_UART_Transmit+0x6c>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d104      	bne.n	8003214 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	61bb      	str	r3, [r7, #24]
 8003212:	e003      	b.n	800321c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003218:	2300      	movs	r3, #0
 800321a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800321c:	e02e      	b.n	800327c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	2200      	movs	r2, #0
 8003226:	2180      	movs	r1, #128	@ 0x80
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 f848 	bl	80032be <UART_WaitOnFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2220      	movs	r2, #32
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e03a      	b.n	80032b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d10b      	bne.n	800325e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	881b      	ldrh	r3, [r3, #0]
 800324a:	461a      	mov	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003254:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	3302      	adds	r3, #2
 800325a:	61bb      	str	r3, [r7, #24]
 800325c:	e007      	b.n	800326e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	781a      	ldrb	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	3301      	adds	r3, #1
 800326c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003272:	b29b      	uxth	r3, r3
 8003274:	3b01      	subs	r3, #1
 8003276:	b29a      	uxth	r2, r3
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003280:	b29b      	uxth	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1cb      	bne.n	800321e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2200      	movs	r2, #0
 800328e:	2140      	movs	r1, #64	@ 0x40
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 f814 	bl	80032be <UART_WaitOnFlagUntilTimeout>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d005      	beq.n	80032a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2220      	movs	r2, #32
 80032a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e006      	b.n	80032b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2220      	movs	r2, #32
 80032ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80032b0:	2300      	movs	r3, #0
 80032b2:	e000      	b.n	80032b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80032b4:	2302      	movs	r3, #2
  }
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3720      	adds	r7, #32
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}

080032be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80032be:	b580      	push	{r7, lr}
 80032c0:	b086      	sub	sp, #24
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	603b      	str	r3, [r7, #0]
 80032ca:	4613      	mov	r3, r2
 80032cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032ce:	e03b      	b.n	8003348 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d6:	d037      	beq.n	8003348 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032d8:	f7fe f9bc 	bl	8001654 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	6a3a      	ldr	r2, [r7, #32]
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d302      	bcc.n	80032ee <UART_WaitOnFlagUntilTimeout+0x30>
 80032e8:	6a3b      	ldr	r3, [r7, #32]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e03a      	b.n	8003368 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	68db      	ldr	r3, [r3, #12]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d023      	beq.n	8003348 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	2b80      	cmp	r3, #128	@ 0x80
 8003304:	d020      	beq.n	8003348 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b40      	cmp	r3, #64	@ 0x40
 800330a:	d01d      	beq.n	8003348 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b08      	cmp	r3, #8
 8003318:	d116      	bne.n	8003348 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800331a:	2300      	movs	r3, #0
 800331c:	617b      	str	r3, [r7, #20]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	617b      	str	r3, [r7, #20]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	617b      	str	r3, [r7, #20]
 800332e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 f81d 	bl	8003370 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2208      	movs	r2, #8
 800333a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e00f      	b.n	8003368 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	68bb      	ldr	r3, [r7, #8]
 8003350:	4013      	ands	r3, r2
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	429a      	cmp	r2, r3
 8003356:	bf0c      	ite	eq
 8003358:	2301      	moveq	r3, #1
 800335a:	2300      	movne	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	461a      	mov	r2, r3
 8003360:	79fb      	ldrb	r3, [r7, #7]
 8003362:	429a      	cmp	r2, r3
 8003364:	d0b4      	beq.n	80032d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003370:	b480      	push	{r7}
 8003372:	b095      	sub	sp, #84	@ 0x54
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	330c      	adds	r3, #12
 800337e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003380:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003382:	e853 3f00 	ldrex	r3, [r3]
 8003386:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003388:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800338a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800338e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	330c      	adds	r3, #12
 8003396:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003398:	643a      	str	r2, [r7, #64]	@ 0x40
 800339a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800339c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800339e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80033a0:	e841 2300 	strex	r3, r2, [r1]
 80033a4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80033a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1e5      	bne.n	8003378 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3314      	adds	r3, #20
 80033b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b4:	6a3b      	ldr	r3, [r7, #32]
 80033b6:	e853 3f00 	ldrex	r3, [r3]
 80033ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f023 0301 	bic.w	r3, r3, #1
 80033c2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	3314      	adds	r3, #20
 80033ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033cc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80033ce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033d4:	e841 2300 	strex	r3, r2, [r1]
 80033d8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80033da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1e5      	bne.n	80033ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d119      	bne.n	800341c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	330c      	adds	r3, #12
 80033ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	e853 3f00 	ldrex	r3, [r3]
 80033f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f023 0310 	bic.w	r3, r3, #16
 80033fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	330c      	adds	r3, #12
 8003406:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003408:	61ba      	str	r2, [r7, #24]
 800340a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340c:	6979      	ldr	r1, [r7, #20]
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	e841 2300 	strex	r3, r2, [r1]
 8003414:	613b      	str	r3, [r7, #16]
   return(result);
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1e5      	bne.n	80033e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2220      	movs	r2, #32
 8003420:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800342a:	bf00      	nop
 800342c:	3754      	adds	r7, #84	@ 0x54
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr
	...

08003438 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003438:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800343c:	b0c0      	sub	sp, #256	@ 0x100
 800343e:	af00      	add	r7, sp, #0
 8003440:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003454:	68d9      	ldr	r1, [r3, #12]
 8003456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	ea40 0301 	orr.w	r3, r0, r1
 8003460:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003466:	689a      	ldr	r2, [r3, #8]
 8003468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	431a      	orrs	r2, r3
 8003470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	431a      	orrs	r2, r3
 8003478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	4313      	orrs	r3, r2
 8003480:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68db      	ldr	r3, [r3, #12]
 800348c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003490:	f021 010c 	bic.w	r1, r1, #12
 8003494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800349e:	430b      	orrs	r3, r1
 80034a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	695b      	ldr	r3, [r3, #20]
 80034aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80034ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b2:	6999      	ldr	r1, [r3, #24]
 80034b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	ea40 0301 	orr.w	r3, r0, r1
 80034be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	4b8f      	ldr	r3, [pc, #572]	@ (8003704 <UART_SetConfig+0x2cc>)
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d005      	beq.n	80034d8 <UART_SetConfig+0xa0>
 80034cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	4b8d      	ldr	r3, [pc, #564]	@ (8003708 <UART_SetConfig+0x2d0>)
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d104      	bne.n	80034e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034d8:	f7ff faf4 	bl	8002ac4 <HAL_RCC_GetPCLK2Freq>
 80034dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80034e0:	e003      	b.n	80034ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034e2:	f7ff fadb 	bl	8002a9c <HAL_RCC_GetPCLK1Freq>
 80034e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034ee:	69db      	ldr	r3, [r3, #28]
 80034f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034f4:	f040 810c 	bne.w	8003710 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034fc:	2200      	movs	r2, #0
 80034fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003502:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003506:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800350a:	4622      	mov	r2, r4
 800350c:	462b      	mov	r3, r5
 800350e:	1891      	adds	r1, r2, r2
 8003510:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003512:	415b      	adcs	r3, r3
 8003514:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003516:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800351a:	4621      	mov	r1, r4
 800351c:	eb12 0801 	adds.w	r8, r2, r1
 8003520:	4629      	mov	r1, r5
 8003522:	eb43 0901 	adc.w	r9, r3, r1
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003532:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003536:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800353a:	4690      	mov	r8, r2
 800353c:	4699      	mov	r9, r3
 800353e:	4623      	mov	r3, r4
 8003540:	eb18 0303 	adds.w	r3, r8, r3
 8003544:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003548:	462b      	mov	r3, r5
 800354a:	eb49 0303 	adc.w	r3, r9, r3
 800354e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800355e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003562:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003566:	460b      	mov	r3, r1
 8003568:	18db      	adds	r3, r3, r3
 800356a:	653b      	str	r3, [r7, #80]	@ 0x50
 800356c:	4613      	mov	r3, r2
 800356e:	eb42 0303 	adc.w	r3, r2, r3
 8003572:	657b      	str	r3, [r7, #84]	@ 0x54
 8003574:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003578:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800357c:	f7fd faa6 	bl	8000acc <__aeabi_uldivmod>
 8003580:	4602      	mov	r2, r0
 8003582:	460b      	mov	r3, r1
 8003584:	4b61      	ldr	r3, [pc, #388]	@ (800370c <UART_SetConfig+0x2d4>)
 8003586:	fba3 2302 	umull	r2, r3, r3, r2
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	011c      	lsls	r4, r3, #4
 800358e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003592:	2200      	movs	r2, #0
 8003594:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003598:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800359c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80035a0:	4642      	mov	r2, r8
 80035a2:	464b      	mov	r3, r9
 80035a4:	1891      	adds	r1, r2, r2
 80035a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80035a8:	415b      	adcs	r3, r3
 80035aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80035b0:	4641      	mov	r1, r8
 80035b2:	eb12 0a01 	adds.w	sl, r2, r1
 80035b6:	4649      	mov	r1, r9
 80035b8:	eb43 0b01 	adc.w	fp, r3, r1
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035d0:	4692      	mov	sl, r2
 80035d2:	469b      	mov	fp, r3
 80035d4:	4643      	mov	r3, r8
 80035d6:	eb1a 0303 	adds.w	r3, sl, r3
 80035da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035de:	464b      	mov	r3, r9
 80035e0:	eb4b 0303 	adc.w	r3, fp, r3
 80035e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80035e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80035f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80035f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80035fc:	460b      	mov	r3, r1
 80035fe:	18db      	adds	r3, r3, r3
 8003600:	643b      	str	r3, [r7, #64]	@ 0x40
 8003602:	4613      	mov	r3, r2
 8003604:	eb42 0303 	adc.w	r3, r2, r3
 8003608:	647b      	str	r3, [r7, #68]	@ 0x44
 800360a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800360e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003612:	f7fd fa5b 	bl	8000acc <__aeabi_uldivmod>
 8003616:	4602      	mov	r2, r0
 8003618:	460b      	mov	r3, r1
 800361a:	4611      	mov	r1, r2
 800361c:	4b3b      	ldr	r3, [pc, #236]	@ (800370c <UART_SetConfig+0x2d4>)
 800361e:	fba3 2301 	umull	r2, r3, r3, r1
 8003622:	095b      	lsrs	r3, r3, #5
 8003624:	2264      	movs	r2, #100	@ 0x64
 8003626:	fb02 f303 	mul.w	r3, r2, r3
 800362a:	1acb      	subs	r3, r1, r3
 800362c:	00db      	lsls	r3, r3, #3
 800362e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003632:	4b36      	ldr	r3, [pc, #216]	@ (800370c <UART_SetConfig+0x2d4>)
 8003634:	fba3 2302 	umull	r2, r3, r3, r2
 8003638:	095b      	lsrs	r3, r3, #5
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003640:	441c      	add	r4, r3
 8003642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003646:	2200      	movs	r2, #0
 8003648:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800364c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003650:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003654:	4642      	mov	r2, r8
 8003656:	464b      	mov	r3, r9
 8003658:	1891      	adds	r1, r2, r2
 800365a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800365c:	415b      	adcs	r3, r3
 800365e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003660:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003664:	4641      	mov	r1, r8
 8003666:	1851      	adds	r1, r2, r1
 8003668:	6339      	str	r1, [r7, #48]	@ 0x30
 800366a:	4649      	mov	r1, r9
 800366c:	414b      	adcs	r3, r1
 800366e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003670:	f04f 0200 	mov.w	r2, #0
 8003674:	f04f 0300 	mov.w	r3, #0
 8003678:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800367c:	4659      	mov	r1, fp
 800367e:	00cb      	lsls	r3, r1, #3
 8003680:	4651      	mov	r1, sl
 8003682:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003686:	4651      	mov	r1, sl
 8003688:	00ca      	lsls	r2, r1, #3
 800368a:	4610      	mov	r0, r2
 800368c:	4619      	mov	r1, r3
 800368e:	4603      	mov	r3, r0
 8003690:	4642      	mov	r2, r8
 8003692:	189b      	adds	r3, r3, r2
 8003694:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003698:	464b      	mov	r3, r9
 800369a:	460a      	mov	r2, r1
 800369c:	eb42 0303 	adc.w	r3, r2, r3
 80036a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80036b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80036b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80036b8:	460b      	mov	r3, r1
 80036ba:	18db      	adds	r3, r3, r3
 80036bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036be:	4613      	mov	r3, r2
 80036c0:	eb42 0303 	adc.w	r3, r2, r3
 80036c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80036c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80036ce:	f7fd f9fd 	bl	8000acc <__aeabi_uldivmod>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4b0d      	ldr	r3, [pc, #52]	@ (800370c <UART_SetConfig+0x2d4>)
 80036d8:	fba3 1302 	umull	r1, r3, r3, r2
 80036dc:	095b      	lsrs	r3, r3, #5
 80036de:	2164      	movs	r1, #100	@ 0x64
 80036e0:	fb01 f303 	mul.w	r3, r1, r3
 80036e4:	1ad3      	subs	r3, r2, r3
 80036e6:	00db      	lsls	r3, r3, #3
 80036e8:	3332      	adds	r3, #50	@ 0x32
 80036ea:	4a08      	ldr	r2, [pc, #32]	@ (800370c <UART_SetConfig+0x2d4>)
 80036ec:	fba2 2303 	umull	r2, r3, r2, r3
 80036f0:	095b      	lsrs	r3, r3, #5
 80036f2:	f003 0207 	and.w	r2, r3, #7
 80036f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4422      	add	r2, r4
 80036fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003700:	e106      	b.n	8003910 <UART_SetConfig+0x4d8>
 8003702:	bf00      	nop
 8003704:	40011000 	.word	0x40011000
 8003708:	40011400 	.word	0x40011400
 800370c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003714:	2200      	movs	r2, #0
 8003716:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800371a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800371e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003722:	4642      	mov	r2, r8
 8003724:	464b      	mov	r3, r9
 8003726:	1891      	adds	r1, r2, r2
 8003728:	6239      	str	r1, [r7, #32]
 800372a:	415b      	adcs	r3, r3
 800372c:	627b      	str	r3, [r7, #36]	@ 0x24
 800372e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003732:	4641      	mov	r1, r8
 8003734:	1854      	adds	r4, r2, r1
 8003736:	4649      	mov	r1, r9
 8003738:	eb43 0501 	adc.w	r5, r3, r1
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	00eb      	lsls	r3, r5, #3
 8003746:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800374a:	00e2      	lsls	r2, r4, #3
 800374c:	4614      	mov	r4, r2
 800374e:	461d      	mov	r5, r3
 8003750:	4643      	mov	r3, r8
 8003752:	18e3      	adds	r3, r4, r3
 8003754:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003758:	464b      	mov	r3, r9
 800375a:	eb45 0303 	adc.w	r3, r5, r3
 800375e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	2200      	movs	r2, #0
 800376a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800376e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003772:	f04f 0200 	mov.w	r2, #0
 8003776:	f04f 0300 	mov.w	r3, #0
 800377a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800377e:	4629      	mov	r1, r5
 8003780:	008b      	lsls	r3, r1, #2
 8003782:	4621      	mov	r1, r4
 8003784:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003788:	4621      	mov	r1, r4
 800378a:	008a      	lsls	r2, r1, #2
 800378c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003790:	f7fd f99c 	bl	8000acc <__aeabi_uldivmod>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	4b60      	ldr	r3, [pc, #384]	@ (800391c <UART_SetConfig+0x4e4>)
 800379a:	fba3 2302 	umull	r2, r3, r3, r2
 800379e:	095b      	lsrs	r3, r3, #5
 80037a0:	011c      	lsls	r4, r3, #4
 80037a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037a6:	2200      	movs	r2, #0
 80037a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80037ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80037b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80037b4:	4642      	mov	r2, r8
 80037b6:	464b      	mov	r3, r9
 80037b8:	1891      	adds	r1, r2, r2
 80037ba:	61b9      	str	r1, [r7, #24]
 80037bc:	415b      	adcs	r3, r3
 80037be:	61fb      	str	r3, [r7, #28]
 80037c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037c4:	4641      	mov	r1, r8
 80037c6:	1851      	adds	r1, r2, r1
 80037c8:	6139      	str	r1, [r7, #16]
 80037ca:	4649      	mov	r1, r9
 80037cc:	414b      	adcs	r3, r1
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	f04f 0200 	mov.w	r2, #0
 80037d4:	f04f 0300 	mov.w	r3, #0
 80037d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037dc:	4659      	mov	r1, fp
 80037de:	00cb      	lsls	r3, r1, #3
 80037e0:	4651      	mov	r1, sl
 80037e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037e6:	4651      	mov	r1, sl
 80037e8:	00ca      	lsls	r2, r1, #3
 80037ea:	4610      	mov	r0, r2
 80037ec:	4619      	mov	r1, r3
 80037ee:	4603      	mov	r3, r0
 80037f0:	4642      	mov	r2, r8
 80037f2:	189b      	adds	r3, r3, r2
 80037f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80037f8:	464b      	mov	r3, r9
 80037fa:	460a      	mov	r2, r1
 80037fc:	eb42 0303 	adc.w	r3, r2, r3
 8003800:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	2200      	movs	r2, #0
 800380c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800380e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	f04f 0300 	mov.w	r3, #0
 8003818:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800381c:	4649      	mov	r1, r9
 800381e:	008b      	lsls	r3, r1, #2
 8003820:	4641      	mov	r1, r8
 8003822:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003826:	4641      	mov	r1, r8
 8003828:	008a      	lsls	r2, r1, #2
 800382a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800382e:	f7fd f94d 	bl	8000acc <__aeabi_uldivmod>
 8003832:	4602      	mov	r2, r0
 8003834:	460b      	mov	r3, r1
 8003836:	4611      	mov	r1, r2
 8003838:	4b38      	ldr	r3, [pc, #224]	@ (800391c <UART_SetConfig+0x4e4>)
 800383a:	fba3 2301 	umull	r2, r3, r3, r1
 800383e:	095b      	lsrs	r3, r3, #5
 8003840:	2264      	movs	r2, #100	@ 0x64
 8003842:	fb02 f303 	mul.w	r3, r2, r3
 8003846:	1acb      	subs	r3, r1, r3
 8003848:	011b      	lsls	r3, r3, #4
 800384a:	3332      	adds	r3, #50	@ 0x32
 800384c:	4a33      	ldr	r2, [pc, #204]	@ (800391c <UART_SetConfig+0x4e4>)
 800384e:	fba2 2303 	umull	r2, r3, r2, r3
 8003852:	095b      	lsrs	r3, r3, #5
 8003854:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003858:	441c      	add	r4, r3
 800385a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800385e:	2200      	movs	r2, #0
 8003860:	673b      	str	r3, [r7, #112]	@ 0x70
 8003862:	677a      	str	r2, [r7, #116]	@ 0x74
 8003864:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003868:	4642      	mov	r2, r8
 800386a:	464b      	mov	r3, r9
 800386c:	1891      	adds	r1, r2, r2
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	415b      	adcs	r3, r3
 8003872:	60fb      	str	r3, [r7, #12]
 8003874:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003878:	4641      	mov	r1, r8
 800387a:	1851      	adds	r1, r2, r1
 800387c:	6039      	str	r1, [r7, #0]
 800387e:	4649      	mov	r1, r9
 8003880:	414b      	adcs	r3, r1
 8003882:	607b      	str	r3, [r7, #4]
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003890:	4659      	mov	r1, fp
 8003892:	00cb      	lsls	r3, r1, #3
 8003894:	4651      	mov	r1, sl
 8003896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800389a:	4651      	mov	r1, sl
 800389c:	00ca      	lsls	r2, r1, #3
 800389e:	4610      	mov	r0, r2
 80038a0:	4619      	mov	r1, r3
 80038a2:	4603      	mov	r3, r0
 80038a4:	4642      	mov	r2, r8
 80038a6:	189b      	adds	r3, r3, r2
 80038a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80038aa:	464b      	mov	r3, r9
 80038ac:	460a      	mov	r2, r1
 80038ae:	eb42 0303 	adc.w	r3, r2, r3
 80038b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80038b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80038be:	667a      	str	r2, [r7, #100]	@ 0x64
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	f04f 0300 	mov.w	r3, #0
 80038c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80038cc:	4649      	mov	r1, r9
 80038ce:	008b      	lsls	r3, r1, #2
 80038d0:	4641      	mov	r1, r8
 80038d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038d6:	4641      	mov	r1, r8
 80038d8:	008a      	lsls	r2, r1, #2
 80038da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80038de:	f7fd f8f5 	bl	8000acc <__aeabi_uldivmod>
 80038e2:	4602      	mov	r2, r0
 80038e4:	460b      	mov	r3, r1
 80038e6:	4b0d      	ldr	r3, [pc, #52]	@ (800391c <UART_SetConfig+0x4e4>)
 80038e8:	fba3 1302 	umull	r1, r3, r3, r2
 80038ec:	095b      	lsrs	r3, r3, #5
 80038ee:	2164      	movs	r1, #100	@ 0x64
 80038f0:	fb01 f303 	mul.w	r3, r1, r3
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	3332      	adds	r3, #50	@ 0x32
 80038fa:	4a08      	ldr	r2, [pc, #32]	@ (800391c <UART_SetConfig+0x4e4>)
 80038fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003900:	095b      	lsrs	r3, r3, #5
 8003902:	f003 020f 	and.w	r2, r3, #15
 8003906:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4422      	add	r2, r4
 800390e:	609a      	str	r2, [r3, #8]
}
 8003910:	bf00      	nop
 8003912:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003916:	46bd      	mov	sp, r7
 8003918:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800391c:	51eb851f 	.word	0x51eb851f

08003920 <sniprintf>:
 8003920:	b40c      	push	{r2, r3}
 8003922:	b530      	push	{r4, r5, lr}
 8003924:	4b17      	ldr	r3, [pc, #92]	@ (8003984 <sniprintf+0x64>)
 8003926:	1e0c      	subs	r4, r1, #0
 8003928:	681d      	ldr	r5, [r3, #0]
 800392a:	b09d      	sub	sp, #116	@ 0x74
 800392c:	da08      	bge.n	8003940 <sniprintf+0x20>
 800392e:	238b      	movs	r3, #139	@ 0x8b
 8003930:	602b      	str	r3, [r5, #0]
 8003932:	f04f 30ff 	mov.w	r0, #4294967295
 8003936:	b01d      	add	sp, #116	@ 0x74
 8003938:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800393c:	b002      	add	sp, #8
 800393e:	4770      	bx	lr
 8003940:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8003944:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003948:	bf14      	ite	ne
 800394a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800394e:	4623      	moveq	r3, r4
 8003950:	9304      	str	r3, [sp, #16]
 8003952:	9307      	str	r3, [sp, #28]
 8003954:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003958:	9002      	str	r0, [sp, #8]
 800395a:	9006      	str	r0, [sp, #24]
 800395c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003960:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8003962:	ab21      	add	r3, sp, #132	@ 0x84
 8003964:	a902      	add	r1, sp, #8
 8003966:	4628      	mov	r0, r5
 8003968:	9301      	str	r3, [sp, #4]
 800396a:	f000 f995 	bl	8003c98 <_svfiprintf_r>
 800396e:	1c43      	adds	r3, r0, #1
 8003970:	bfbc      	itt	lt
 8003972:	238b      	movlt	r3, #139	@ 0x8b
 8003974:	602b      	strlt	r3, [r5, #0]
 8003976:	2c00      	cmp	r4, #0
 8003978:	d0dd      	beq.n	8003936 <sniprintf+0x16>
 800397a:	9b02      	ldr	r3, [sp, #8]
 800397c:	2200      	movs	r2, #0
 800397e:	701a      	strb	r2, [r3, #0]
 8003980:	e7d9      	b.n	8003936 <sniprintf+0x16>
 8003982:	bf00      	nop
 8003984:	2000000c 	.word	0x2000000c

08003988 <memset>:
 8003988:	4402      	add	r2, r0
 800398a:	4603      	mov	r3, r0
 800398c:	4293      	cmp	r3, r2
 800398e:	d100      	bne.n	8003992 <memset+0xa>
 8003990:	4770      	bx	lr
 8003992:	f803 1b01 	strb.w	r1, [r3], #1
 8003996:	e7f9      	b.n	800398c <memset+0x4>

08003998 <__errno>:
 8003998:	4b01      	ldr	r3, [pc, #4]	@ (80039a0 <__errno+0x8>)
 800399a:	6818      	ldr	r0, [r3, #0]
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	2000000c 	.word	0x2000000c

080039a4 <__libc_init_array>:
 80039a4:	b570      	push	{r4, r5, r6, lr}
 80039a6:	4d0d      	ldr	r5, [pc, #52]	@ (80039dc <__libc_init_array+0x38>)
 80039a8:	4c0d      	ldr	r4, [pc, #52]	@ (80039e0 <__libc_init_array+0x3c>)
 80039aa:	1b64      	subs	r4, r4, r5
 80039ac:	10a4      	asrs	r4, r4, #2
 80039ae:	2600      	movs	r6, #0
 80039b0:	42a6      	cmp	r6, r4
 80039b2:	d109      	bne.n	80039c8 <__libc_init_array+0x24>
 80039b4:	4d0b      	ldr	r5, [pc, #44]	@ (80039e4 <__libc_init_array+0x40>)
 80039b6:	4c0c      	ldr	r4, [pc, #48]	@ (80039e8 <__libc_init_array+0x44>)
 80039b8:	f000 fc66 	bl	8004288 <_init>
 80039bc:	1b64      	subs	r4, r4, r5
 80039be:	10a4      	asrs	r4, r4, #2
 80039c0:	2600      	movs	r6, #0
 80039c2:	42a6      	cmp	r6, r4
 80039c4:	d105      	bne.n	80039d2 <__libc_init_array+0x2e>
 80039c6:	bd70      	pop	{r4, r5, r6, pc}
 80039c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039cc:	4798      	blx	r3
 80039ce:	3601      	adds	r6, #1
 80039d0:	e7ee      	b.n	80039b0 <__libc_init_array+0xc>
 80039d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039d6:	4798      	blx	r3
 80039d8:	3601      	adds	r6, #1
 80039da:	e7f2      	b.n	80039c2 <__libc_init_array+0x1e>
 80039dc:	08004310 	.word	0x08004310
 80039e0:	08004310 	.word	0x08004310
 80039e4:	08004310 	.word	0x08004310
 80039e8:	08004314 	.word	0x08004314

080039ec <__retarget_lock_acquire_recursive>:
 80039ec:	4770      	bx	lr

080039ee <__retarget_lock_release_recursive>:
 80039ee:	4770      	bx	lr

080039f0 <_free_r>:
 80039f0:	b538      	push	{r3, r4, r5, lr}
 80039f2:	4605      	mov	r5, r0
 80039f4:	2900      	cmp	r1, #0
 80039f6:	d041      	beq.n	8003a7c <_free_r+0x8c>
 80039f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80039fc:	1f0c      	subs	r4, r1, #4
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	bfb8      	it	lt
 8003a02:	18e4      	addlt	r4, r4, r3
 8003a04:	f000 f8e0 	bl	8003bc8 <__malloc_lock>
 8003a08:	4a1d      	ldr	r2, [pc, #116]	@ (8003a80 <_free_r+0x90>)
 8003a0a:	6813      	ldr	r3, [r2, #0]
 8003a0c:	b933      	cbnz	r3, 8003a1c <_free_r+0x2c>
 8003a0e:	6063      	str	r3, [r4, #4]
 8003a10:	6014      	str	r4, [r2, #0]
 8003a12:	4628      	mov	r0, r5
 8003a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a18:	f000 b8dc 	b.w	8003bd4 <__malloc_unlock>
 8003a1c:	42a3      	cmp	r3, r4
 8003a1e:	d908      	bls.n	8003a32 <_free_r+0x42>
 8003a20:	6820      	ldr	r0, [r4, #0]
 8003a22:	1821      	adds	r1, r4, r0
 8003a24:	428b      	cmp	r3, r1
 8003a26:	bf01      	itttt	eq
 8003a28:	6819      	ldreq	r1, [r3, #0]
 8003a2a:	685b      	ldreq	r3, [r3, #4]
 8003a2c:	1809      	addeq	r1, r1, r0
 8003a2e:	6021      	streq	r1, [r4, #0]
 8003a30:	e7ed      	b.n	8003a0e <_free_r+0x1e>
 8003a32:	461a      	mov	r2, r3
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	b10b      	cbz	r3, 8003a3c <_free_r+0x4c>
 8003a38:	42a3      	cmp	r3, r4
 8003a3a:	d9fa      	bls.n	8003a32 <_free_r+0x42>
 8003a3c:	6811      	ldr	r1, [r2, #0]
 8003a3e:	1850      	adds	r0, r2, r1
 8003a40:	42a0      	cmp	r0, r4
 8003a42:	d10b      	bne.n	8003a5c <_free_r+0x6c>
 8003a44:	6820      	ldr	r0, [r4, #0]
 8003a46:	4401      	add	r1, r0
 8003a48:	1850      	adds	r0, r2, r1
 8003a4a:	4283      	cmp	r3, r0
 8003a4c:	6011      	str	r1, [r2, #0]
 8003a4e:	d1e0      	bne.n	8003a12 <_free_r+0x22>
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	6053      	str	r3, [r2, #4]
 8003a56:	4408      	add	r0, r1
 8003a58:	6010      	str	r0, [r2, #0]
 8003a5a:	e7da      	b.n	8003a12 <_free_r+0x22>
 8003a5c:	d902      	bls.n	8003a64 <_free_r+0x74>
 8003a5e:	230c      	movs	r3, #12
 8003a60:	602b      	str	r3, [r5, #0]
 8003a62:	e7d6      	b.n	8003a12 <_free_r+0x22>
 8003a64:	6820      	ldr	r0, [r4, #0]
 8003a66:	1821      	adds	r1, r4, r0
 8003a68:	428b      	cmp	r3, r1
 8003a6a:	bf04      	itt	eq
 8003a6c:	6819      	ldreq	r1, [r3, #0]
 8003a6e:	685b      	ldreq	r3, [r3, #4]
 8003a70:	6063      	str	r3, [r4, #4]
 8003a72:	bf04      	itt	eq
 8003a74:	1809      	addeq	r1, r1, r0
 8003a76:	6021      	streq	r1, [r4, #0]
 8003a78:	6054      	str	r4, [r2, #4]
 8003a7a:	e7ca      	b.n	8003a12 <_free_r+0x22>
 8003a7c:	bd38      	pop	{r3, r4, r5, pc}
 8003a7e:	bf00      	nop
 8003a80:	200002ac 	.word	0x200002ac

08003a84 <sbrk_aligned>:
 8003a84:	b570      	push	{r4, r5, r6, lr}
 8003a86:	4e0f      	ldr	r6, [pc, #60]	@ (8003ac4 <sbrk_aligned+0x40>)
 8003a88:	460c      	mov	r4, r1
 8003a8a:	6831      	ldr	r1, [r6, #0]
 8003a8c:	4605      	mov	r5, r0
 8003a8e:	b911      	cbnz	r1, 8003a96 <sbrk_aligned+0x12>
 8003a90:	f000 fba6 	bl	80041e0 <_sbrk_r>
 8003a94:	6030      	str	r0, [r6, #0]
 8003a96:	4621      	mov	r1, r4
 8003a98:	4628      	mov	r0, r5
 8003a9a:	f000 fba1 	bl	80041e0 <_sbrk_r>
 8003a9e:	1c43      	adds	r3, r0, #1
 8003aa0:	d103      	bne.n	8003aaa <sbrk_aligned+0x26>
 8003aa2:	f04f 34ff 	mov.w	r4, #4294967295
 8003aa6:	4620      	mov	r0, r4
 8003aa8:	bd70      	pop	{r4, r5, r6, pc}
 8003aaa:	1cc4      	adds	r4, r0, #3
 8003aac:	f024 0403 	bic.w	r4, r4, #3
 8003ab0:	42a0      	cmp	r0, r4
 8003ab2:	d0f8      	beq.n	8003aa6 <sbrk_aligned+0x22>
 8003ab4:	1a21      	subs	r1, r4, r0
 8003ab6:	4628      	mov	r0, r5
 8003ab8:	f000 fb92 	bl	80041e0 <_sbrk_r>
 8003abc:	3001      	adds	r0, #1
 8003abe:	d1f2      	bne.n	8003aa6 <sbrk_aligned+0x22>
 8003ac0:	e7ef      	b.n	8003aa2 <sbrk_aligned+0x1e>
 8003ac2:	bf00      	nop
 8003ac4:	200002a8 	.word	0x200002a8

08003ac8 <_malloc_r>:
 8003ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003acc:	1ccd      	adds	r5, r1, #3
 8003ace:	f025 0503 	bic.w	r5, r5, #3
 8003ad2:	3508      	adds	r5, #8
 8003ad4:	2d0c      	cmp	r5, #12
 8003ad6:	bf38      	it	cc
 8003ad8:	250c      	movcc	r5, #12
 8003ada:	2d00      	cmp	r5, #0
 8003adc:	4606      	mov	r6, r0
 8003ade:	db01      	blt.n	8003ae4 <_malloc_r+0x1c>
 8003ae0:	42a9      	cmp	r1, r5
 8003ae2:	d904      	bls.n	8003aee <_malloc_r+0x26>
 8003ae4:	230c      	movs	r3, #12
 8003ae6:	6033      	str	r3, [r6, #0]
 8003ae8:	2000      	movs	r0, #0
 8003aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003aee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003bc4 <_malloc_r+0xfc>
 8003af2:	f000 f869 	bl	8003bc8 <__malloc_lock>
 8003af6:	f8d8 3000 	ldr.w	r3, [r8]
 8003afa:	461c      	mov	r4, r3
 8003afc:	bb44      	cbnz	r4, 8003b50 <_malloc_r+0x88>
 8003afe:	4629      	mov	r1, r5
 8003b00:	4630      	mov	r0, r6
 8003b02:	f7ff ffbf 	bl	8003a84 <sbrk_aligned>
 8003b06:	1c43      	adds	r3, r0, #1
 8003b08:	4604      	mov	r4, r0
 8003b0a:	d158      	bne.n	8003bbe <_malloc_r+0xf6>
 8003b0c:	f8d8 4000 	ldr.w	r4, [r8]
 8003b10:	4627      	mov	r7, r4
 8003b12:	2f00      	cmp	r7, #0
 8003b14:	d143      	bne.n	8003b9e <_malloc_r+0xd6>
 8003b16:	2c00      	cmp	r4, #0
 8003b18:	d04b      	beq.n	8003bb2 <_malloc_r+0xea>
 8003b1a:	6823      	ldr	r3, [r4, #0]
 8003b1c:	4639      	mov	r1, r7
 8003b1e:	4630      	mov	r0, r6
 8003b20:	eb04 0903 	add.w	r9, r4, r3
 8003b24:	f000 fb5c 	bl	80041e0 <_sbrk_r>
 8003b28:	4581      	cmp	r9, r0
 8003b2a:	d142      	bne.n	8003bb2 <_malloc_r+0xea>
 8003b2c:	6821      	ldr	r1, [r4, #0]
 8003b2e:	1a6d      	subs	r5, r5, r1
 8003b30:	4629      	mov	r1, r5
 8003b32:	4630      	mov	r0, r6
 8003b34:	f7ff ffa6 	bl	8003a84 <sbrk_aligned>
 8003b38:	3001      	adds	r0, #1
 8003b3a:	d03a      	beq.n	8003bb2 <_malloc_r+0xea>
 8003b3c:	6823      	ldr	r3, [r4, #0]
 8003b3e:	442b      	add	r3, r5
 8003b40:	6023      	str	r3, [r4, #0]
 8003b42:	f8d8 3000 	ldr.w	r3, [r8]
 8003b46:	685a      	ldr	r2, [r3, #4]
 8003b48:	bb62      	cbnz	r2, 8003ba4 <_malloc_r+0xdc>
 8003b4a:	f8c8 7000 	str.w	r7, [r8]
 8003b4e:	e00f      	b.n	8003b70 <_malloc_r+0xa8>
 8003b50:	6822      	ldr	r2, [r4, #0]
 8003b52:	1b52      	subs	r2, r2, r5
 8003b54:	d420      	bmi.n	8003b98 <_malloc_r+0xd0>
 8003b56:	2a0b      	cmp	r2, #11
 8003b58:	d917      	bls.n	8003b8a <_malloc_r+0xc2>
 8003b5a:	1961      	adds	r1, r4, r5
 8003b5c:	42a3      	cmp	r3, r4
 8003b5e:	6025      	str	r5, [r4, #0]
 8003b60:	bf18      	it	ne
 8003b62:	6059      	strne	r1, [r3, #4]
 8003b64:	6863      	ldr	r3, [r4, #4]
 8003b66:	bf08      	it	eq
 8003b68:	f8c8 1000 	streq.w	r1, [r8]
 8003b6c:	5162      	str	r2, [r4, r5]
 8003b6e:	604b      	str	r3, [r1, #4]
 8003b70:	4630      	mov	r0, r6
 8003b72:	f000 f82f 	bl	8003bd4 <__malloc_unlock>
 8003b76:	f104 000b 	add.w	r0, r4, #11
 8003b7a:	1d23      	adds	r3, r4, #4
 8003b7c:	f020 0007 	bic.w	r0, r0, #7
 8003b80:	1ac2      	subs	r2, r0, r3
 8003b82:	bf1c      	itt	ne
 8003b84:	1a1b      	subne	r3, r3, r0
 8003b86:	50a3      	strne	r3, [r4, r2]
 8003b88:	e7af      	b.n	8003aea <_malloc_r+0x22>
 8003b8a:	6862      	ldr	r2, [r4, #4]
 8003b8c:	42a3      	cmp	r3, r4
 8003b8e:	bf0c      	ite	eq
 8003b90:	f8c8 2000 	streq.w	r2, [r8]
 8003b94:	605a      	strne	r2, [r3, #4]
 8003b96:	e7eb      	b.n	8003b70 <_malloc_r+0xa8>
 8003b98:	4623      	mov	r3, r4
 8003b9a:	6864      	ldr	r4, [r4, #4]
 8003b9c:	e7ae      	b.n	8003afc <_malloc_r+0x34>
 8003b9e:	463c      	mov	r4, r7
 8003ba0:	687f      	ldr	r7, [r7, #4]
 8003ba2:	e7b6      	b.n	8003b12 <_malloc_r+0x4a>
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	42a3      	cmp	r3, r4
 8003baa:	d1fb      	bne.n	8003ba4 <_malloc_r+0xdc>
 8003bac:	2300      	movs	r3, #0
 8003bae:	6053      	str	r3, [r2, #4]
 8003bb0:	e7de      	b.n	8003b70 <_malloc_r+0xa8>
 8003bb2:	230c      	movs	r3, #12
 8003bb4:	6033      	str	r3, [r6, #0]
 8003bb6:	4630      	mov	r0, r6
 8003bb8:	f000 f80c 	bl	8003bd4 <__malloc_unlock>
 8003bbc:	e794      	b.n	8003ae8 <_malloc_r+0x20>
 8003bbe:	6005      	str	r5, [r0, #0]
 8003bc0:	e7d6      	b.n	8003b70 <_malloc_r+0xa8>
 8003bc2:	bf00      	nop
 8003bc4:	200002ac 	.word	0x200002ac

08003bc8 <__malloc_lock>:
 8003bc8:	4801      	ldr	r0, [pc, #4]	@ (8003bd0 <__malloc_lock+0x8>)
 8003bca:	f7ff bf0f 	b.w	80039ec <__retarget_lock_acquire_recursive>
 8003bce:	bf00      	nop
 8003bd0:	200002a4 	.word	0x200002a4

08003bd4 <__malloc_unlock>:
 8003bd4:	4801      	ldr	r0, [pc, #4]	@ (8003bdc <__malloc_unlock+0x8>)
 8003bd6:	f7ff bf0a 	b.w	80039ee <__retarget_lock_release_recursive>
 8003bda:	bf00      	nop
 8003bdc:	200002a4 	.word	0x200002a4

08003be0 <__ssputs_r>:
 8003be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003be4:	688e      	ldr	r6, [r1, #8]
 8003be6:	461f      	mov	r7, r3
 8003be8:	42be      	cmp	r6, r7
 8003bea:	680b      	ldr	r3, [r1, #0]
 8003bec:	4682      	mov	sl, r0
 8003bee:	460c      	mov	r4, r1
 8003bf0:	4690      	mov	r8, r2
 8003bf2:	d82d      	bhi.n	8003c50 <__ssputs_r+0x70>
 8003bf4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003bf8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003bfc:	d026      	beq.n	8003c4c <__ssputs_r+0x6c>
 8003bfe:	6965      	ldr	r5, [r4, #20]
 8003c00:	6909      	ldr	r1, [r1, #16]
 8003c02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003c06:	eba3 0901 	sub.w	r9, r3, r1
 8003c0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003c0e:	1c7b      	adds	r3, r7, #1
 8003c10:	444b      	add	r3, r9
 8003c12:	106d      	asrs	r5, r5, #1
 8003c14:	429d      	cmp	r5, r3
 8003c16:	bf38      	it	cc
 8003c18:	461d      	movcc	r5, r3
 8003c1a:	0553      	lsls	r3, r2, #21
 8003c1c:	d527      	bpl.n	8003c6e <__ssputs_r+0x8e>
 8003c1e:	4629      	mov	r1, r5
 8003c20:	f7ff ff52 	bl	8003ac8 <_malloc_r>
 8003c24:	4606      	mov	r6, r0
 8003c26:	b360      	cbz	r0, 8003c82 <__ssputs_r+0xa2>
 8003c28:	6921      	ldr	r1, [r4, #16]
 8003c2a:	464a      	mov	r2, r9
 8003c2c:	f000 fae8 	bl	8004200 <memcpy>
 8003c30:	89a3      	ldrh	r3, [r4, #12]
 8003c32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003c36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003c3a:	81a3      	strh	r3, [r4, #12]
 8003c3c:	6126      	str	r6, [r4, #16]
 8003c3e:	6165      	str	r5, [r4, #20]
 8003c40:	444e      	add	r6, r9
 8003c42:	eba5 0509 	sub.w	r5, r5, r9
 8003c46:	6026      	str	r6, [r4, #0]
 8003c48:	60a5      	str	r5, [r4, #8]
 8003c4a:	463e      	mov	r6, r7
 8003c4c:	42be      	cmp	r6, r7
 8003c4e:	d900      	bls.n	8003c52 <__ssputs_r+0x72>
 8003c50:	463e      	mov	r6, r7
 8003c52:	6820      	ldr	r0, [r4, #0]
 8003c54:	4632      	mov	r2, r6
 8003c56:	4641      	mov	r1, r8
 8003c58:	f000 faa8 	bl	80041ac <memmove>
 8003c5c:	68a3      	ldr	r3, [r4, #8]
 8003c5e:	1b9b      	subs	r3, r3, r6
 8003c60:	60a3      	str	r3, [r4, #8]
 8003c62:	6823      	ldr	r3, [r4, #0]
 8003c64:	4433      	add	r3, r6
 8003c66:	6023      	str	r3, [r4, #0]
 8003c68:	2000      	movs	r0, #0
 8003c6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c6e:	462a      	mov	r2, r5
 8003c70:	f000 fad4 	bl	800421c <_realloc_r>
 8003c74:	4606      	mov	r6, r0
 8003c76:	2800      	cmp	r0, #0
 8003c78:	d1e0      	bne.n	8003c3c <__ssputs_r+0x5c>
 8003c7a:	6921      	ldr	r1, [r4, #16]
 8003c7c:	4650      	mov	r0, sl
 8003c7e:	f7ff feb7 	bl	80039f0 <_free_r>
 8003c82:	230c      	movs	r3, #12
 8003c84:	f8ca 3000 	str.w	r3, [sl]
 8003c88:	89a3      	ldrh	r3, [r4, #12]
 8003c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003c8e:	81a3      	strh	r3, [r4, #12]
 8003c90:	f04f 30ff 	mov.w	r0, #4294967295
 8003c94:	e7e9      	b.n	8003c6a <__ssputs_r+0x8a>
	...

08003c98 <_svfiprintf_r>:
 8003c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c9c:	4698      	mov	r8, r3
 8003c9e:	898b      	ldrh	r3, [r1, #12]
 8003ca0:	061b      	lsls	r3, r3, #24
 8003ca2:	b09d      	sub	sp, #116	@ 0x74
 8003ca4:	4607      	mov	r7, r0
 8003ca6:	460d      	mov	r5, r1
 8003ca8:	4614      	mov	r4, r2
 8003caa:	d510      	bpl.n	8003cce <_svfiprintf_r+0x36>
 8003cac:	690b      	ldr	r3, [r1, #16]
 8003cae:	b973      	cbnz	r3, 8003cce <_svfiprintf_r+0x36>
 8003cb0:	2140      	movs	r1, #64	@ 0x40
 8003cb2:	f7ff ff09 	bl	8003ac8 <_malloc_r>
 8003cb6:	6028      	str	r0, [r5, #0]
 8003cb8:	6128      	str	r0, [r5, #16]
 8003cba:	b930      	cbnz	r0, 8003cca <_svfiprintf_r+0x32>
 8003cbc:	230c      	movs	r3, #12
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc4:	b01d      	add	sp, #116	@ 0x74
 8003cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cca:	2340      	movs	r3, #64	@ 0x40
 8003ccc:	616b      	str	r3, [r5, #20]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003cd2:	2320      	movs	r3, #32
 8003cd4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003cd8:	f8cd 800c 	str.w	r8, [sp, #12]
 8003cdc:	2330      	movs	r3, #48	@ 0x30
 8003cde:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003e7c <_svfiprintf_r+0x1e4>
 8003ce2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003ce6:	f04f 0901 	mov.w	r9, #1
 8003cea:	4623      	mov	r3, r4
 8003cec:	469a      	mov	sl, r3
 8003cee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003cf2:	b10a      	cbz	r2, 8003cf8 <_svfiprintf_r+0x60>
 8003cf4:	2a25      	cmp	r2, #37	@ 0x25
 8003cf6:	d1f9      	bne.n	8003cec <_svfiprintf_r+0x54>
 8003cf8:	ebba 0b04 	subs.w	fp, sl, r4
 8003cfc:	d00b      	beq.n	8003d16 <_svfiprintf_r+0x7e>
 8003cfe:	465b      	mov	r3, fp
 8003d00:	4622      	mov	r2, r4
 8003d02:	4629      	mov	r1, r5
 8003d04:	4638      	mov	r0, r7
 8003d06:	f7ff ff6b 	bl	8003be0 <__ssputs_r>
 8003d0a:	3001      	adds	r0, #1
 8003d0c:	f000 80a7 	beq.w	8003e5e <_svfiprintf_r+0x1c6>
 8003d10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003d12:	445a      	add	r2, fp
 8003d14:	9209      	str	r2, [sp, #36]	@ 0x24
 8003d16:	f89a 3000 	ldrb.w	r3, [sl]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 809f 	beq.w	8003e5e <_svfiprintf_r+0x1c6>
 8003d20:	2300      	movs	r3, #0
 8003d22:	f04f 32ff 	mov.w	r2, #4294967295
 8003d26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003d2a:	f10a 0a01 	add.w	sl, sl, #1
 8003d2e:	9304      	str	r3, [sp, #16]
 8003d30:	9307      	str	r3, [sp, #28]
 8003d32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003d36:	931a      	str	r3, [sp, #104]	@ 0x68
 8003d38:	4654      	mov	r4, sl
 8003d3a:	2205      	movs	r2, #5
 8003d3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d40:	484e      	ldr	r0, [pc, #312]	@ (8003e7c <_svfiprintf_r+0x1e4>)
 8003d42:	f7fc fa55 	bl	80001f0 <memchr>
 8003d46:	9a04      	ldr	r2, [sp, #16]
 8003d48:	b9d8      	cbnz	r0, 8003d82 <_svfiprintf_r+0xea>
 8003d4a:	06d0      	lsls	r0, r2, #27
 8003d4c:	bf44      	itt	mi
 8003d4e:	2320      	movmi	r3, #32
 8003d50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d54:	0711      	lsls	r1, r2, #28
 8003d56:	bf44      	itt	mi
 8003d58:	232b      	movmi	r3, #43	@ 0x2b
 8003d5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003d5e:	f89a 3000 	ldrb.w	r3, [sl]
 8003d62:	2b2a      	cmp	r3, #42	@ 0x2a
 8003d64:	d015      	beq.n	8003d92 <_svfiprintf_r+0xfa>
 8003d66:	9a07      	ldr	r2, [sp, #28]
 8003d68:	4654      	mov	r4, sl
 8003d6a:	2000      	movs	r0, #0
 8003d6c:	f04f 0c0a 	mov.w	ip, #10
 8003d70:	4621      	mov	r1, r4
 8003d72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d76:	3b30      	subs	r3, #48	@ 0x30
 8003d78:	2b09      	cmp	r3, #9
 8003d7a:	d94b      	bls.n	8003e14 <_svfiprintf_r+0x17c>
 8003d7c:	b1b0      	cbz	r0, 8003dac <_svfiprintf_r+0x114>
 8003d7e:	9207      	str	r2, [sp, #28]
 8003d80:	e014      	b.n	8003dac <_svfiprintf_r+0x114>
 8003d82:	eba0 0308 	sub.w	r3, r0, r8
 8003d86:	fa09 f303 	lsl.w	r3, r9, r3
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	9304      	str	r3, [sp, #16]
 8003d8e:	46a2      	mov	sl, r4
 8003d90:	e7d2      	b.n	8003d38 <_svfiprintf_r+0xa0>
 8003d92:	9b03      	ldr	r3, [sp, #12]
 8003d94:	1d19      	adds	r1, r3, #4
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	9103      	str	r1, [sp, #12]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	bfbb      	ittet	lt
 8003d9e:	425b      	neglt	r3, r3
 8003da0:	f042 0202 	orrlt.w	r2, r2, #2
 8003da4:	9307      	strge	r3, [sp, #28]
 8003da6:	9307      	strlt	r3, [sp, #28]
 8003da8:	bfb8      	it	lt
 8003daa:	9204      	strlt	r2, [sp, #16]
 8003dac:	7823      	ldrb	r3, [r4, #0]
 8003dae:	2b2e      	cmp	r3, #46	@ 0x2e
 8003db0:	d10a      	bne.n	8003dc8 <_svfiprintf_r+0x130>
 8003db2:	7863      	ldrb	r3, [r4, #1]
 8003db4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003db6:	d132      	bne.n	8003e1e <_svfiprintf_r+0x186>
 8003db8:	9b03      	ldr	r3, [sp, #12]
 8003dba:	1d1a      	adds	r2, r3, #4
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	9203      	str	r2, [sp, #12]
 8003dc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003dc4:	3402      	adds	r4, #2
 8003dc6:	9305      	str	r3, [sp, #20]
 8003dc8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003e8c <_svfiprintf_r+0x1f4>
 8003dcc:	7821      	ldrb	r1, [r4, #0]
 8003dce:	2203      	movs	r2, #3
 8003dd0:	4650      	mov	r0, sl
 8003dd2:	f7fc fa0d 	bl	80001f0 <memchr>
 8003dd6:	b138      	cbz	r0, 8003de8 <_svfiprintf_r+0x150>
 8003dd8:	9b04      	ldr	r3, [sp, #16]
 8003dda:	eba0 000a 	sub.w	r0, r0, sl
 8003dde:	2240      	movs	r2, #64	@ 0x40
 8003de0:	4082      	lsls	r2, r0
 8003de2:	4313      	orrs	r3, r2
 8003de4:	3401      	adds	r4, #1
 8003de6:	9304      	str	r3, [sp, #16]
 8003de8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003dec:	4824      	ldr	r0, [pc, #144]	@ (8003e80 <_svfiprintf_r+0x1e8>)
 8003dee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003df2:	2206      	movs	r2, #6
 8003df4:	f7fc f9fc 	bl	80001f0 <memchr>
 8003df8:	2800      	cmp	r0, #0
 8003dfa:	d036      	beq.n	8003e6a <_svfiprintf_r+0x1d2>
 8003dfc:	4b21      	ldr	r3, [pc, #132]	@ (8003e84 <_svfiprintf_r+0x1ec>)
 8003dfe:	bb1b      	cbnz	r3, 8003e48 <_svfiprintf_r+0x1b0>
 8003e00:	9b03      	ldr	r3, [sp, #12]
 8003e02:	3307      	adds	r3, #7
 8003e04:	f023 0307 	bic.w	r3, r3, #7
 8003e08:	3308      	adds	r3, #8
 8003e0a:	9303      	str	r3, [sp, #12]
 8003e0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003e0e:	4433      	add	r3, r6
 8003e10:	9309      	str	r3, [sp, #36]	@ 0x24
 8003e12:	e76a      	b.n	8003cea <_svfiprintf_r+0x52>
 8003e14:	fb0c 3202 	mla	r2, ip, r2, r3
 8003e18:	460c      	mov	r4, r1
 8003e1a:	2001      	movs	r0, #1
 8003e1c:	e7a8      	b.n	8003d70 <_svfiprintf_r+0xd8>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	3401      	adds	r4, #1
 8003e22:	9305      	str	r3, [sp, #20]
 8003e24:	4619      	mov	r1, r3
 8003e26:	f04f 0c0a 	mov.w	ip, #10
 8003e2a:	4620      	mov	r0, r4
 8003e2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003e30:	3a30      	subs	r2, #48	@ 0x30
 8003e32:	2a09      	cmp	r2, #9
 8003e34:	d903      	bls.n	8003e3e <_svfiprintf_r+0x1a6>
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0c6      	beq.n	8003dc8 <_svfiprintf_r+0x130>
 8003e3a:	9105      	str	r1, [sp, #20]
 8003e3c:	e7c4      	b.n	8003dc8 <_svfiprintf_r+0x130>
 8003e3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003e42:	4604      	mov	r4, r0
 8003e44:	2301      	movs	r3, #1
 8003e46:	e7f0      	b.n	8003e2a <_svfiprintf_r+0x192>
 8003e48:	ab03      	add	r3, sp, #12
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	462a      	mov	r2, r5
 8003e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8003e88 <_svfiprintf_r+0x1f0>)
 8003e50:	a904      	add	r1, sp, #16
 8003e52:	4638      	mov	r0, r7
 8003e54:	f3af 8000 	nop.w
 8003e58:	1c42      	adds	r2, r0, #1
 8003e5a:	4606      	mov	r6, r0
 8003e5c:	d1d6      	bne.n	8003e0c <_svfiprintf_r+0x174>
 8003e5e:	89ab      	ldrh	r3, [r5, #12]
 8003e60:	065b      	lsls	r3, r3, #25
 8003e62:	f53f af2d 	bmi.w	8003cc0 <_svfiprintf_r+0x28>
 8003e66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003e68:	e72c      	b.n	8003cc4 <_svfiprintf_r+0x2c>
 8003e6a:	ab03      	add	r3, sp, #12
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	462a      	mov	r2, r5
 8003e70:	4b05      	ldr	r3, [pc, #20]	@ (8003e88 <_svfiprintf_r+0x1f0>)
 8003e72:	a904      	add	r1, sp, #16
 8003e74:	4638      	mov	r0, r7
 8003e76:	f000 f879 	bl	8003f6c <_printf_i>
 8003e7a:	e7ed      	b.n	8003e58 <_svfiprintf_r+0x1c0>
 8003e7c:	080042d4 	.word	0x080042d4
 8003e80:	080042de 	.word	0x080042de
 8003e84:	00000000 	.word	0x00000000
 8003e88:	08003be1 	.word	0x08003be1
 8003e8c:	080042da 	.word	0x080042da

08003e90 <_printf_common>:
 8003e90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e94:	4616      	mov	r6, r2
 8003e96:	4698      	mov	r8, r3
 8003e98:	688a      	ldr	r2, [r1, #8]
 8003e9a:	690b      	ldr	r3, [r1, #16]
 8003e9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	bfb8      	it	lt
 8003ea4:	4613      	movlt	r3, r2
 8003ea6:	6033      	str	r3, [r6, #0]
 8003ea8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003eac:	4607      	mov	r7, r0
 8003eae:	460c      	mov	r4, r1
 8003eb0:	b10a      	cbz	r2, 8003eb6 <_printf_common+0x26>
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	6033      	str	r3, [r6, #0]
 8003eb6:	6823      	ldr	r3, [r4, #0]
 8003eb8:	0699      	lsls	r1, r3, #26
 8003eba:	bf42      	ittt	mi
 8003ebc:	6833      	ldrmi	r3, [r6, #0]
 8003ebe:	3302      	addmi	r3, #2
 8003ec0:	6033      	strmi	r3, [r6, #0]
 8003ec2:	6825      	ldr	r5, [r4, #0]
 8003ec4:	f015 0506 	ands.w	r5, r5, #6
 8003ec8:	d106      	bne.n	8003ed8 <_printf_common+0x48>
 8003eca:	f104 0a19 	add.w	sl, r4, #25
 8003ece:	68e3      	ldr	r3, [r4, #12]
 8003ed0:	6832      	ldr	r2, [r6, #0]
 8003ed2:	1a9b      	subs	r3, r3, r2
 8003ed4:	42ab      	cmp	r3, r5
 8003ed6:	dc26      	bgt.n	8003f26 <_printf_common+0x96>
 8003ed8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003edc:	6822      	ldr	r2, [r4, #0]
 8003ede:	3b00      	subs	r3, #0
 8003ee0:	bf18      	it	ne
 8003ee2:	2301      	movne	r3, #1
 8003ee4:	0692      	lsls	r2, r2, #26
 8003ee6:	d42b      	bmi.n	8003f40 <_printf_common+0xb0>
 8003ee8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003eec:	4641      	mov	r1, r8
 8003eee:	4638      	mov	r0, r7
 8003ef0:	47c8      	blx	r9
 8003ef2:	3001      	adds	r0, #1
 8003ef4:	d01e      	beq.n	8003f34 <_printf_common+0xa4>
 8003ef6:	6823      	ldr	r3, [r4, #0]
 8003ef8:	6922      	ldr	r2, [r4, #16]
 8003efa:	f003 0306 	and.w	r3, r3, #6
 8003efe:	2b04      	cmp	r3, #4
 8003f00:	bf02      	ittt	eq
 8003f02:	68e5      	ldreq	r5, [r4, #12]
 8003f04:	6833      	ldreq	r3, [r6, #0]
 8003f06:	1aed      	subeq	r5, r5, r3
 8003f08:	68a3      	ldr	r3, [r4, #8]
 8003f0a:	bf0c      	ite	eq
 8003f0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f10:	2500      	movne	r5, #0
 8003f12:	4293      	cmp	r3, r2
 8003f14:	bfc4      	itt	gt
 8003f16:	1a9b      	subgt	r3, r3, r2
 8003f18:	18ed      	addgt	r5, r5, r3
 8003f1a:	2600      	movs	r6, #0
 8003f1c:	341a      	adds	r4, #26
 8003f1e:	42b5      	cmp	r5, r6
 8003f20:	d11a      	bne.n	8003f58 <_printf_common+0xc8>
 8003f22:	2000      	movs	r0, #0
 8003f24:	e008      	b.n	8003f38 <_printf_common+0xa8>
 8003f26:	2301      	movs	r3, #1
 8003f28:	4652      	mov	r2, sl
 8003f2a:	4641      	mov	r1, r8
 8003f2c:	4638      	mov	r0, r7
 8003f2e:	47c8      	blx	r9
 8003f30:	3001      	adds	r0, #1
 8003f32:	d103      	bne.n	8003f3c <_printf_common+0xac>
 8003f34:	f04f 30ff 	mov.w	r0, #4294967295
 8003f38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f3c:	3501      	adds	r5, #1
 8003f3e:	e7c6      	b.n	8003ece <_printf_common+0x3e>
 8003f40:	18e1      	adds	r1, r4, r3
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	2030      	movs	r0, #48	@ 0x30
 8003f46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003f4a:	4422      	add	r2, r4
 8003f4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003f50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003f54:	3302      	adds	r3, #2
 8003f56:	e7c7      	b.n	8003ee8 <_printf_common+0x58>
 8003f58:	2301      	movs	r3, #1
 8003f5a:	4622      	mov	r2, r4
 8003f5c:	4641      	mov	r1, r8
 8003f5e:	4638      	mov	r0, r7
 8003f60:	47c8      	blx	r9
 8003f62:	3001      	adds	r0, #1
 8003f64:	d0e6      	beq.n	8003f34 <_printf_common+0xa4>
 8003f66:	3601      	adds	r6, #1
 8003f68:	e7d9      	b.n	8003f1e <_printf_common+0x8e>
	...

08003f6c <_printf_i>:
 8003f6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003f70:	7e0f      	ldrb	r7, [r1, #24]
 8003f72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003f74:	2f78      	cmp	r7, #120	@ 0x78
 8003f76:	4691      	mov	r9, r2
 8003f78:	4680      	mov	r8, r0
 8003f7a:	460c      	mov	r4, r1
 8003f7c:	469a      	mov	sl, r3
 8003f7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003f82:	d807      	bhi.n	8003f94 <_printf_i+0x28>
 8003f84:	2f62      	cmp	r7, #98	@ 0x62
 8003f86:	d80a      	bhi.n	8003f9e <_printf_i+0x32>
 8003f88:	2f00      	cmp	r7, #0
 8003f8a:	f000 80d2 	beq.w	8004132 <_printf_i+0x1c6>
 8003f8e:	2f58      	cmp	r7, #88	@ 0x58
 8003f90:	f000 80b9 	beq.w	8004106 <_printf_i+0x19a>
 8003f94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f9c:	e03a      	b.n	8004014 <_printf_i+0xa8>
 8003f9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003fa2:	2b15      	cmp	r3, #21
 8003fa4:	d8f6      	bhi.n	8003f94 <_printf_i+0x28>
 8003fa6:	a101      	add	r1, pc, #4	@ (adr r1, 8003fac <_printf_i+0x40>)
 8003fa8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003fac:	08004005 	.word	0x08004005
 8003fb0:	08004019 	.word	0x08004019
 8003fb4:	08003f95 	.word	0x08003f95
 8003fb8:	08003f95 	.word	0x08003f95
 8003fbc:	08003f95 	.word	0x08003f95
 8003fc0:	08003f95 	.word	0x08003f95
 8003fc4:	08004019 	.word	0x08004019
 8003fc8:	08003f95 	.word	0x08003f95
 8003fcc:	08003f95 	.word	0x08003f95
 8003fd0:	08003f95 	.word	0x08003f95
 8003fd4:	08003f95 	.word	0x08003f95
 8003fd8:	08004119 	.word	0x08004119
 8003fdc:	08004043 	.word	0x08004043
 8003fe0:	080040d3 	.word	0x080040d3
 8003fe4:	08003f95 	.word	0x08003f95
 8003fe8:	08003f95 	.word	0x08003f95
 8003fec:	0800413b 	.word	0x0800413b
 8003ff0:	08003f95 	.word	0x08003f95
 8003ff4:	08004043 	.word	0x08004043
 8003ff8:	08003f95 	.word	0x08003f95
 8003ffc:	08003f95 	.word	0x08003f95
 8004000:	080040db 	.word	0x080040db
 8004004:	6833      	ldr	r3, [r6, #0]
 8004006:	1d1a      	adds	r2, r3, #4
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	6032      	str	r2, [r6, #0]
 800400c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004010:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004014:	2301      	movs	r3, #1
 8004016:	e09d      	b.n	8004154 <_printf_i+0x1e8>
 8004018:	6833      	ldr	r3, [r6, #0]
 800401a:	6820      	ldr	r0, [r4, #0]
 800401c:	1d19      	adds	r1, r3, #4
 800401e:	6031      	str	r1, [r6, #0]
 8004020:	0606      	lsls	r6, r0, #24
 8004022:	d501      	bpl.n	8004028 <_printf_i+0xbc>
 8004024:	681d      	ldr	r5, [r3, #0]
 8004026:	e003      	b.n	8004030 <_printf_i+0xc4>
 8004028:	0645      	lsls	r5, r0, #25
 800402a:	d5fb      	bpl.n	8004024 <_printf_i+0xb8>
 800402c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004030:	2d00      	cmp	r5, #0
 8004032:	da03      	bge.n	800403c <_printf_i+0xd0>
 8004034:	232d      	movs	r3, #45	@ 0x2d
 8004036:	426d      	negs	r5, r5
 8004038:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800403c:	4859      	ldr	r0, [pc, #356]	@ (80041a4 <_printf_i+0x238>)
 800403e:	230a      	movs	r3, #10
 8004040:	e011      	b.n	8004066 <_printf_i+0xfa>
 8004042:	6821      	ldr	r1, [r4, #0]
 8004044:	6833      	ldr	r3, [r6, #0]
 8004046:	0608      	lsls	r0, r1, #24
 8004048:	f853 5b04 	ldr.w	r5, [r3], #4
 800404c:	d402      	bmi.n	8004054 <_printf_i+0xe8>
 800404e:	0649      	lsls	r1, r1, #25
 8004050:	bf48      	it	mi
 8004052:	b2ad      	uxthmi	r5, r5
 8004054:	2f6f      	cmp	r7, #111	@ 0x6f
 8004056:	4853      	ldr	r0, [pc, #332]	@ (80041a4 <_printf_i+0x238>)
 8004058:	6033      	str	r3, [r6, #0]
 800405a:	bf14      	ite	ne
 800405c:	230a      	movne	r3, #10
 800405e:	2308      	moveq	r3, #8
 8004060:	2100      	movs	r1, #0
 8004062:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004066:	6866      	ldr	r6, [r4, #4]
 8004068:	60a6      	str	r6, [r4, #8]
 800406a:	2e00      	cmp	r6, #0
 800406c:	bfa2      	ittt	ge
 800406e:	6821      	ldrge	r1, [r4, #0]
 8004070:	f021 0104 	bicge.w	r1, r1, #4
 8004074:	6021      	strge	r1, [r4, #0]
 8004076:	b90d      	cbnz	r5, 800407c <_printf_i+0x110>
 8004078:	2e00      	cmp	r6, #0
 800407a:	d04b      	beq.n	8004114 <_printf_i+0x1a8>
 800407c:	4616      	mov	r6, r2
 800407e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004082:	fb03 5711 	mls	r7, r3, r1, r5
 8004086:	5dc7      	ldrb	r7, [r0, r7]
 8004088:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800408c:	462f      	mov	r7, r5
 800408e:	42bb      	cmp	r3, r7
 8004090:	460d      	mov	r5, r1
 8004092:	d9f4      	bls.n	800407e <_printf_i+0x112>
 8004094:	2b08      	cmp	r3, #8
 8004096:	d10b      	bne.n	80040b0 <_printf_i+0x144>
 8004098:	6823      	ldr	r3, [r4, #0]
 800409a:	07df      	lsls	r7, r3, #31
 800409c:	d508      	bpl.n	80040b0 <_printf_i+0x144>
 800409e:	6923      	ldr	r3, [r4, #16]
 80040a0:	6861      	ldr	r1, [r4, #4]
 80040a2:	4299      	cmp	r1, r3
 80040a4:	bfde      	ittt	le
 80040a6:	2330      	movle	r3, #48	@ 0x30
 80040a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80040ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80040b0:	1b92      	subs	r2, r2, r6
 80040b2:	6122      	str	r2, [r4, #16]
 80040b4:	f8cd a000 	str.w	sl, [sp]
 80040b8:	464b      	mov	r3, r9
 80040ba:	aa03      	add	r2, sp, #12
 80040bc:	4621      	mov	r1, r4
 80040be:	4640      	mov	r0, r8
 80040c0:	f7ff fee6 	bl	8003e90 <_printf_common>
 80040c4:	3001      	adds	r0, #1
 80040c6:	d14a      	bne.n	800415e <_printf_i+0x1f2>
 80040c8:	f04f 30ff 	mov.w	r0, #4294967295
 80040cc:	b004      	add	sp, #16
 80040ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040d2:	6823      	ldr	r3, [r4, #0]
 80040d4:	f043 0320 	orr.w	r3, r3, #32
 80040d8:	6023      	str	r3, [r4, #0]
 80040da:	4833      	ldr	r0, [pc, #204]	@ (80041a8 <_printf_i+0x23c>)
 80040dc:	2778      	movs	r7, #120	@ 0x78
 80040de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80040e2:	6823      	ldr	r3, [r4, #0]
 80040e4:	6831      	ldr	r1, [r6, #0]
 80040e6:	061f      	lsls	r7, r3, #24
 80040e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80040ec:	d402      	bmi.n	80040f4 <_printf_i+0x188>
 80040ee:	065f      	lsls	r7, r3, #25
 80040f0:	bf48      	it	mi
 80040f2:	b2ad      	uxthmi	r5, r5
 80040f4:	6031      	str	r1, [r6, #0]
 80040f6:	07d9      	lsls	r1, r3, #31
 80040f8:	bf44      	itt	mi
 80040fa:	f043 0320 	orrmi.w	r3, r3, #32
 80040fe:	6023      	strmi	r3, [r4, #0]
 8004100:	b11d      	cbz	r5, 800410a <_printf_i+0x19e>
 8004102:	2310      	movs	r3, #16
 8004104:	e7ac      	b.n	8004060 <_printf_i+0xf4>
 8004106:	4827      	ldr	r0, [pc, #156]	@ (80041a4 <_printf_i+0x238>)
 8004108:	e7e9      	b.n	80040de <_printf_i+0x172>
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	f023 0320 	bic.w	r3, r3, #32
 8004110:	6023      	str	r3, [r4, #0]
 8004112:	e7f6      	b.n	8004102 <_printf_i+0x196>
 8004114:	4616      	mov	r6, r2
 8004116:	e7bd      	b.n	8004094 <_printf_i+0x128>
 8004118:	6833      	ldr	r3, [r6, #0]
 800411a:	6825      	ldr	r5, [r4, #0]
 800411c:	6961      	ldr	r1, [r4, #20]
 800411e:	1d18      	adds	r0, r3, #4
 8004120:	6030      	str	r0, [r6, #0]
 8004122:	062e      	lsls	r6, r5, #24
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	d501      	bpl.n	800412c <_printf_i+0x1c0>
 8004128:	6019      	str	r1, [r3, #0]
 800412a:	e002      	b.n	8004132 <_printf_i+0x1c6>
 800412c:	0668      	lsls	r0, r5, #25
 800412e:	d5fb      	bpl.n	8004128 <_printf_i+0x1bc>
 8004130:	8019      	strh	r1, [r3, #0]
 8004132:	2300      	movs	r3, #0
 8004134:	6123      	str	r3, [r4, #16]
 8004136:	4616      	mov	r6, r2
 8004138:	e7bc      	b.n	80040b4 <_printf_i+0x148>
 800413a:	6833      	ldr	r3, [r6, #0]
 800413c:	1d1a      	adds	r2, r3, #4
 800413e:	6032      	str	r2, [r6, #0]
 8004140:	681e      	ldr	r6, [r3, #0]
 8004142:	6862      	ldr	r2, [r4, #4]
 8004144:	2100      	movs	r1, #0
 8004146:	4630      	mov	r0, r6
 8004148:	f7fc f852 	bl	80001f0 <memchr>
 800414c:	b108      	cbz	r0, 8004152 <_printf_i+0x1e6>
 800414e:	1b80      	subs	r0, r0, r6
 8004150:	6060      	str	r0, [r4, #4]
 8004152:	6863      	ldr	r3, [r4, #4]
 8004154:	6123      	str	r3, [r4, #16]
 8004156:	2300      	movs	r3, #0
 8004158:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800415c:	e7aa      	b.n	80040b4 <_printf_i+0x148>
 800415e:	6923      	ldr	r3, [r4, #16]
 8004160:	4632      	mov	r2, r6
 8004162:	4649      	mov	r1, r9
 8004164:	4640      	mov	r0, r8
 8004166:	47d0      	blx	sl
 8004168:	3001      	adds	r0, #1
 800416a:	d0ad      	beq.n	80040c8 <_printf_i+0x15c>
 800416c:	6823      	ldr	r3, [r4, #0]
 800416e:	079b      	lsls	r3, r3, #30
 8004170:	d413      	bmi.n	800419a <_printf_i+0x22e>
 8004172:	68e0      	ldr	r0, [r4, #12]
 8004174:	9b03      	ldr	r3, [sp, #12]
 8004176:	4298      	cmp	r0, r3
 8004178:	bfb8      	it	lt
 800417a:	4618      	movlt	r0, r3
 800417c:	e7a6      	b.n	80040cc <_printf_i+0x160>
 800417e:	2301      	movs	r3, #1
 8004180:	4632      	mov	r2, r6
 8004182:	4649      	mov	r1, r9
 8004184:	4640      	mov	r0, r8
 8004186:	47d0      	blx	sl
 8004188:	3001      	adds	r0, #1
 800418a:	d09d      	beq.n	80040c8 <_printf_i+0x15c>
 800418c:	3501      	adds	r5, #1
 800418e:	68e3      	ldr	r3, [r4, #12]
 8004190:	9903      	ldr	r1, [sp, #12]
 8004192:	1a5b      	subs	r3, r3, r1
 8004194:	42ab      	cmp	r3, r5
 8004196:	dcf2      	bgt.n	800417e <_printf_i+0x212>
 8004198:	e7eb      	b.n	8004172 <_printf_i+0x206>
 800419a:	2500      	movs	r5, #0
 800419c:	f104 0619 	add.w	r6, r4, #25
 80041a0:	e7f5      	b.n	800418e <_printf_i+0x222>
 80041a2:	bf00      	nop
 80041a4:	080042e5 	.word	0x080042e5
 80041a8:	080042f6 	.word	0x080042f6

080041ac <memmove>:
 80041ac:	4288      	cmp	r0, r1
 80041ae:	b510      	push	{r4, lr}
 80041b0:	eb01 0402 	add.w	r4, r1, r2
 80041b4:	d902      	bls.n	80041bc <memmove+0x10>
 80041b6:	4284      	cmp	r4, r0
 80041b8:	4623      	mov	r3, r4
 80041ba:	d807      	bhi.n	80041cc <memmove+0x20>
 80041bc:	1e43      	subs	r3, r0, #1
 80041be:	42a1      	cmp	r1, r4
 80041c0:	d008      	beq.n	80041d4 <memmove+0x28>
 80041c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041ca:	e7f8      	b.n	80041be <memmove+0x12>
 80041cc:	4402      	add	r2, r0
 80041ce:	4601      	mov	r1, r0
 80041d0:	428a      	cmp	r2, r1
 80041d2:	d100      	bne.n	80041d6 <memmove+0x2a>
 80041d4:	bd10      	pop	{r4, pc}
 80041d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041de:	e7f7      	b.n	80041d0 <memmove+0x24>

080041e0 <_sbrk_r>:
 80041e0:	b538      	push	{r3, r4, r5, lr}
 80041e2:	4d06      	ldr	r5, [pc, #24]	@ (80041fc <_sbrk_r+0x1c>)
 80041e4:	2300      	movs	r3, #0
 80041e6:	4604      	mov	r4, r0
 80041e8:	4608      	mov	r0, r1
 80041ea:	602b      	str	r3, [r5, #0]
 80041ec:	f7fd f95a 	bl	80014a4 <_sbrk>
 80041f0:	1c43      	adds	r3, r0, #1
 80041f2:	d102      	bne.n	80041fa <_sbrk_r+0x1a>
 80041f4:	682b      	ldr	r3, [r5, #0]
 80041f6:	b103      	cbz	r3, 80041fa <_sbrk_r+0x1a>
 80041f8:	6023      	str	r3, [r4, #0]
 80041fa:	bd38      	pop	{r3, r4, r5, pc}
 80041fc:	200002a0 	.word	0x200002a0

08004200 <memcpy>:
 8004200:	440a      	add	r2, r1
 8004202:	4291      	cmp	r1, r2
 8004204:	f100 33ff 	add.w	r3, r0, #4294967295
 8004208:	d100      	bne.n	800420c <memcpy+0xc>
 800420a:	4770      	bx	lr
 800420c:	b510      	push	{r4, lr}
 800420e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004212:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004216:	4291      	cmp	r1, r2
 8004218:	d1f9      	bne.n	800420e <memcpy+0xe>
 800421a:	bd10      	pop	{r4, pc}

0800421c <_realloc_r>:
 800421c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004220:	4680      	mov	r8, r0
 8004222:	4615      	mov	r5, r2
 8004224:	460c      	mov	r4, r1
 8004226:	b921      	cbnz	r1, 8004232 <_realloc_r+0x16>
 8004228:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800422c:	4611      	mov	r1, r2
 800422e:	f7ff bc4b 	b.w	8003ac8 <_malloc_r>
 8004232:	b92a      	cbnz	r2, 8004240 <_realloc_r+0x24>
 8004234:	f7ff fbdc 	bl	80039f0 <_free_r>
 8004238:	2400      	movs	r4, #0
 800423a:	4620      	mov	r0, r4
 800423c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004240:	f000 f81a 	bl	8004278 <_malloc_usable_size_r>
 8004244:	4285      	cmp	r5, r0
 8004246:	4606      	mov	r6, r0
 8004248:	d802      	bhi.n	8004250 <_realloc_r+0x34>
 800424a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800424e:	d8f4      	bhi.n	800423a <_realloc_r+0x1e>
 8004250:	4629      	mov	r1, r5
 8004252:	4640      	mov	r0, r8
 8004254:	f7ff fc38 	bl	8003ac8 <_malloc_r>
 8004258:	4607      	mov	r7, r0
 800425a:	2800      	cmp	r0, #0
 800425c:	d0ec      	beq.n	8004238 <_realloc_r+0x1c>
 800425e:	42b5      	cmp	r5, r6
 8004260:	462a      	mov	r2, r5
 8004262:	4621      	mov	r1, r4
 8004264:	bf28      	it	cs
 8004266:	4632      	movcs	r2, r6
 8004268:	f7ff ffca 	bl	8004200 <memcpy>
 800426c:	4621      	mov	r1, r4
 800426e:	4640      	mov	r0, r8
 8004270:	f7ff fbbe 	bl	80039f0 <_free_r>
 8004274:	463c      	mov	r4, r7
 8004276:	e7e0      	b.n	800423a <_realloc_r+0x1e>

08004278 <_malloc_usable_size_r>:
 8004278:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800427c:	1f18      	subs	r0, r3, #4
 800427e:	2b00      	cmp	r3, #0
 8004280:	bfbc      	itt	lt
 8004282:	580b      	ldrlt	r3, [r1, r0]
 8004284:	18c0      	addlt	r0, r0, r3
 8004286:	4770      	bx	lr

08004288 <_init>:
 8004288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800428a:	bf00      	nop
 800428c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800428e:	bc08      	pop	{r3}
 8004290:	469e      	mov	lr, r3
 8004292:	4770      	bx	lr

08004294 <_fini>:
 8004294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004296:	bf00      	nop
 8004298:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800429a:	bc08      	pop	{r3}
 800429c:	469e      	mov	lr, r3
 800429e:	4770      	bx	lr
